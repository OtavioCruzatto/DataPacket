
DataPacket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003edc  08003edc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee4  08003ee4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000001c  08003f08  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003f08  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f585  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002110  00000000  00000000  0002f5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000316e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000324a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022393  00000000  00000000  00033180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e19  00000000  00000000  00055513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d01ac  00000000  00000000  0006632c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001364d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  00136528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003dac 	.word	0x08003dac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08003dac 	.word	0x08003dac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d113      	bne.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		// counterTimerUartRxInterrupt++;
		counterTimer1++;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000520:	6013      	str	r3, [r2, #0]
		counterTimer2++;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800052a:	6013      	str	r3, [r2, #0]
		counterTimer3++;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000534:	6013      	str	r3, [r2, #0]
		counterTimer4++;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800053e:	6013      	str	r3, [r2, #0]
	}
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000038 	.word	0x20000038
 8000550:	2000014c 	.word	0x2000014c
 8000554:	20000150 	.word	0x20000150
 8000558:	20000154 	.word	0x20000154
 800055c:	20000158 	.word	0x20000158

08000560 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <HAL_UART_RxCpltCallback+0x34>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d10d      	bne.n	800058c <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	4909      	ldr	r1, [pc, #36]	; (8000598 <HAL_UART_RxCpltCallback+0x38>)
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <HAL_UART_RxCpltCallback+0x34>)
 8000576:	f002 f946 	bl	8002806 <HAL_UART_Receive_IT>
		dataPacketRxAppend(&dataPacketRx, receivedByte);
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <HAL_UART_RxCpltCallback+0x38>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4619      	mov	r1, r3
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <HAL_UART_RxCpltCallback+0x3c>)
 8000582:	f003 f95e 	bl	8003842 <dataPacketRxAppend>
		// counterTimerUartRxInterrupt = 0;
		receivedByte = 0x00;
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_UART_RxCpltCallback+0x38>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000080 	.word	0x20000080
 8000598:	2000014a 	.word	0x2000014a
 800059c:	20000104 	.word	0x20000104

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b091      	sub	sp, #68	; 0x44
 80005a4:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb09 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8c7 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f993 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f967 	bl	8000884 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80005b6:	f000 f92d 	bl	8000814 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 80005ba:	4853      	ldr	r0, [pc, #332]	; (8000708 <main+0x168>)
 80005bc:	f001 fc8e 	bl	8001edc <HAL_TIM_Base_Start_IT>
  dataPacketTxInit(&dataPacketTx, 0xAA, 0x55);
 80005c0:	2255      	movs	r2, #85	; 0x55
 80005c2:	21aa      	movs	r1, #170	; 0xaa
 80005c4:	4851      	ldr	r0, [pc, #324]	; (800070c <main+0x16c>)
 80005c6:	f003 fab5 	bl	8003b34 <dataPacketTxInit>
  dataPacketRxInit(&dataPacketRx, 0xAA, 0x55);
 80005ca:	2255      	movs	r2, #85	; 0x55
 80005cc:	21aa      	movs	r1, #170	; 0xaa
 80005ce:	4850      	ldr	r0, [pc, #320]	; (8000710 <main+0x170>)
 80005d0:	f003 f8f8 	bl	80037c4 <dataPacketRxInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	494f      	ldr	r1, [pc, #316]	; (8000714 <main+0x174>)
 80005d8:	484f      	ldr	r0, [pc, #316]	; (8000718 <main+0x178>)
 80005da:	f002 f914 	bl	8002806 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (counterTimer1 >= DELAY_1000_MILISECONDS)
 80005de:	4b4f      	ldr	r3, [pc, #316]	; (800071c <main+0x17c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d927      	bls.n	800063a <main+0x9a>
	  {
		  dataPacketTxSetCommand(&dataPacketTx, 0x01);
 80005ea:	2101      	movs	r1, #1
 80005ec:	4847      	ldr	r0, [pc, #284]	; (800070c <main+0x16c>)
 80005ee:	f003 fb70 	bl	8003cd2 <dataPacketTxSetCommand>
		  dataPacketTxSetPayloadData(&dataPacketTx, bytes, 16);
 80005f2:	2210      	movs	r2, #16
 80005f4:	494a      	ldr	r1, [pc, #296]	; (8000720 <main+0x180>)
 80005f6:	4845      	ldr	r0, [pc, #276]	; (800070c <main+0x16c>)
 80005f8:	f003 fb85 	bl	8003d06 <dataPacketTxSetPayloadData>
		  dataPacketTxMount(&dataPacketTx);
 80005fc:	4843      	ldr	r0, [pc, #268]	; (800070c <main+0x16c>)
 80005fe:	f003 fac9 	bl	8003b94 <dataPacketTxMount>
		  dataPacketTxUartSend(&dataPacketTx, huart2);
 8000602:	4e45      	ldr	r6, [pc, #276]	; (8000718 <main+0x178>)
 8000604:	466d      	mov	r5, sp
 8000606:	f106 040c 	add.w	r4, r6, #12
 800060a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800061a:	e885 0003 	stmia.w	r5, {r0, r1}
 800061e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000622:	483a      	ldr	r0, [pc, #232]	; (800070c <main+0x16c>)
 8000624:	f003 fafd 	bl	8003c22 <dataPacketTxUartSend>
		  dataPacketTxPayloadDataClear(&dataPacketTx);
 8000628:	4838      	ldr	r0, [pc, #224]	; (800070c <main+0x16c>)
 800062a:	f003 fb36 	bl	8003c9a <dataPacketTxPayloadDataClear>
		  dataPacketTxClear(&dataPacketTx);
 800062e:	4837      	ldr	r0, [pc, #220]	; (800070c <main+0x16c>)
 8000630:	f003 fb17 	bl	8003c62 <dataPacketTxClear>
		  counterTimer1 = 0;
 8000634:	4b39      	ldr	r3, [pc, #228]	; (800071c <main+0x17c>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
	  }

	  if (counterTimer2 >= DELAY_1000_MILISECONDS)
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <main+0x184>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000642:	4293      	cmp	r3, r2
 8000644:	d93b      	bls.n	80006be <main+0x11e>
	  {
		  if (dataPacketRxGetDataPacketStatus(&dataPacketRx) == VALID_RX_DATA_PACKET)
 8000646:	4832      	ldr	r0, [pc, #200]	; (8000710 <main+0x170>)
 8000648:	f003 fa67 	bl	8003b1a <dataPacketRxGetDataPacketStatus>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d12f      	bne.n	80006b2 <main+0x112>
		  {
			  uint8_t receivedCmd = dataPacketRxGetCommand(&dataPacketRx);
 8000652:	482f      	ldr	r0, [pc, #188]	; (8000710 <main+0x170>)
 8000654:	f003 fa3c 	bl	8003ad0 <dataPacketRxGetCommand>
 8000658:	4603      	mov	r3, r0
 800065a:	71fb      	strb	r3, [r7, #7]
			  switch (receivedCmd)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b30      	cmp	r3, #48	; 0x30
 8000660:	d016      	beq.n	8000690 <main+0xf0>
 8000662:	2b30      	cmp	r3, #48	; 0x30
 8000664:	dc1c      	bgt.n	80006a0 <main+0x100>
 8000666:	2b10      	cmp	r3, #16
 8000668:	d002      	beq.n	8000670 <main+0xd0>
 800066a:	2b20      	cmp	r3, #32
 800066c:	d008      	beq.n	8000680 <main+0xe0>
 800066e:	e017      	b.n	80006a0 <main+0x100>
			  {
				  case 0x10:
					  blinkDelay = DELAY_100_MILISECONDS;
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <main+0x188>)
 8000672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000676:	601a      	str	r2, [r3, #0]
					  blinkStatus = TRUE;
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <main+0x18c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
					  break;
 800067e:	e016      	b.n	80006ae <main+0x10e>

				  case 0x20:
					  blinkDelay = DELAY_250_MILISECONDS;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <main+0x188>)
 8000682:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000686:	601a      	str	r2, [r3, #0]
					  blinkStatus = TRUE;
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <main+0x18c>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
					  break;
 800068e:	e00e      	b.n	80006ae <main+0x10e>

				  case 0x30:
					  blinkDelay = DELAY_500_MILISECONDS;
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <main+0x188>)
 8000692:	f241 3288 	movw	r2, #5000	; 0x1388
 8000696:	601a      	str	r2, [r3, #0]
					  blinkStatus = TRUE;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <main+0x18c>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
					  break;
 800069e:	e006      	b.n	80006ae <main+0x10e>

				  default:
					  blinkDelay = 0;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <main+0x188>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
					  blinkStatus = FALSE;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <main+0x18c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
					  break;
 80006ac:	bf00      	nop
			  }
			  receivedCmd = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
		  }

		  dataPacketRxClear(&dataPacketRx);
 80006b2:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x170>)
 80006b4:	f003 f9bd 	bl	8003a32 <dataPacketRxClear>
		  counterTimer2 = 0;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <main+0x184>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	  }

	  if (counterTimer3 >= DELAY_100_MILISECONDS)
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <main+0x190>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c6:	d305      	bcc.n	80006d4 <main+0x134>
	  {
		  dataPacketRxDecode(&dataPacketRx);
 80006c8:	4811      	ldr	r0, [pc, #68]	; (8000710 <main+0x170>)
 80006ca:	f003 f8e4 	bl	8003896 <dataPacketRxDecode>
		  counterTimer3 = 0;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <main+0x190>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
	  }

	  if (counterTimer4 >= blinkDelay)
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <main+0x194>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <main+0x188>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	f4ff af7e 	bcc.w	80005de <main+0x3e>
	  {
		  if (blinkStatus == TRUE)
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <main+0x18c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d104      	bne.n	80006f4 <main+0x154>
		  {
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006ea:	2120      	movs	r1, #32
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <main+0x198>)
 80006ee:	f000 fe28 	bl	8001342 <HAL_GPIO_TogglePin>
 80006f2:	e004      	b.n	80006fe <main+0x15e>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2120      	movs	r1, #32
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0x198>)
 80006fa:	f000 fe09 	bl	8001310 <HAL_GPIO_WritePin>
		  }
		  counterTimer4 = 0;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0x194>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	  if (counterTimer1 >= DELAY_1000_MILISECONDS)
 8000704:	e76b      	b.n	80005de <main+0x3e>
 8000706:	bf00      	nop
 8000708:	20000038 	.word	0x20000038
 800070c:	200000c4 	.word	0x200000c4
 8000710:	20000104 	.word	0x20000104
 8000714:	2000014a 	.word	0x2000014a
 8000718:	20000080 	.word	0x20000080
 800071c:	2000014c 	.word	0x2000014c
 8000720:	20000000 	.word	0x20000000
 8000724:	20000150 	.word	0x20000150
 8000728:	20000160 	.word	0x20000160
 800072c:	2000015c 	.word	0x2000015c
 8000730:	20000154 	.word	0x20000154
 8000734:	20000158 	.word	0x20000158
 8000738:	40020000 	.word	0x40020000

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fb26 	bl	8003d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <SystemClock_Config+0xd0>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <SystemClock_Config+0xd4>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80007b4:	235a      	movs	r3, #90	; 0x5a
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f899 	bl	8001900 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007d4:	f000 f8d2 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fdbf 	bl	8001378 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000800:	f000 f8bc 	bl	800097c <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM9_Init+0x68>)
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_TIM9_Init+0x6c>)
 800082a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_TIM9_Init+0x68>)
 800082e:	2263      	movs	r2, #99	; 0x63
 8000830:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_TIM9_Init+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 90;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_TIM9_Init+0x68>)
 800083a:	225a      	movs	r2, #90	; 0x5a
 800083c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_TIM9_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_TIM9_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM9_Init+0x68>)
 800084c:	f001 faf6 	bl	8001e3c <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f891 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM9_Init+0x68>)
 8000866:	f001 fcb1 	bl	80021cc <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 f884 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000038 	.word	0x20000038
 8000880:	40014000 	.word	0x40014000

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART2_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000890:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008bc:	f001 fec4 	bl	8002648 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f859 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000080 	.word	0x20000080
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_GPIO_Init+0x98>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <MX_GPIO_Init+0x98>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_GPIO_Init+0x98>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_GPIO_Init+0x98>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_GPIO_Init+0x98>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_GPIO_Init+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_GPIO_Init+0x9c>)
 800092c:	f000 fcf0 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_GPIO_Init+0xa0>)
 8000946:	f000 fb4f 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800094a:	2320      	movs	r3, #32
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x9c>)
 8000962:	f000 fb41 	bl	8000fe8 <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	40020800 	.word	0x40020800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d115      	bne.n	8000a16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_TIM_Base_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_TIM_Base_MspInit+0x4c>)
 80009f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2018      	movs	r0, #24
 8000a0c:	f000 fa23 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000a10:	2018      	movs	r0, #24
 8000a12:	f000 fa3c 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40014000 	.word	0x40014000
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_UART_MspInit+0x94>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d133      	bne.n	8000ab2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_UART_MspInit+0x9c>)
 8000a9e:	f000 faa3 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 f9d5 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	; 0x26
 8000aae:	f000 f9ee 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8a4 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000b22:	f001 fa4b 	bl	8001fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000038 	.word	0x20000038

08000b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <USART2_IRQHandler+0x10>)
 8000b36:	f001 fe97 	bl	8002868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000080 	.word	0x20000080

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b92:	f7ff ffd7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f003 f8cf 	bl	8003d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fd01 	bl	80005a0 <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bac:	08003eec 	.word	0x08003eec
  ldr r2, =_sbss
 8000bb0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000bb4:	20000168 	.word	0x20000168

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f92b 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff feca 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f943 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f90b 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000010 	.word	0x20000010
 8000c58:	20000018 	.word	0x20000018
 8000c5c:	20000014 	.word	0x20000014

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000164 	.word	0x20000164

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000164 	.word	0x20000164

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff29 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff3e 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff8e 	bl	8000d94 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5d 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff31 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffa2 	bl	8000dfc <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff feda 	bl	8000c88 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d008      	beq.n	8000ef4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e052      	b.n	8000f9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0216 	bic.w	r2, r2, #22
 8000f02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <HAL_DMA_Abort+0x62>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0208 	bic.w	r2, r2, #8
 8000f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f44:	e013      	b.n	8000f6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f46:	f7ff fe9f 	bl	8000c88 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d90c      	bls.n	8000f6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2220      	movs	r2, #32
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e015      	b.n	8000f9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e4      	bne.n	8000f46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f80:	223f      	movs	r2, #63	; 0x3f
 8000f82:	409a      	lsls	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d004      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e00c      	b.n	8000fda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0201 	bic.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e165      	b.n	80012d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 8154 	bne.w	80012ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	2b02      	cmp	r3, #2
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80ae 	beq.w	80012ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <HAL_GPIO_Init+0x300>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a5c      	ldr	r2, [pc, #368]	; (80012e8 <HAL_GPIO_Init+0x300>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <HAL_GPIO_Init+0x300>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x304>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x308>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x30c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x310>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x314>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x318>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x20a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_GPIO_Init+0x31c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x206>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a49      	ldr	r2, [pc, #292]	; (8001308 <HAL_GPIO_Init+0x320>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x202>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x21c>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4935      	ldr	r1, [pc, #212]	; (80012ec <HAL_GPIO_Init+0x304>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_GPIO_Init+0x324>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_GPIO_Init+0x324>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_GPIO_Init+0x324>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_GPIO_Init+0x324>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_GPIO_Init+0x324>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_GPIO_Init+0x324>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_GPIO_Init+0x324>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_GPIO_Init+0x324>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f ae96 	bls.w	8001004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43d9      	mvns	r1, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	400b      	ands	r3, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0cc      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d90c      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0b8      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a58      	ldr	r2, [pc, #352]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	494d      	ldr	r1, [pc, #308]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d044      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d119      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e07f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	2b03      	cmp	r3, #3
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e067      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fc0e 	bl	8000c88 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fc0a 	bl	8000c88 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e04f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d20c      	bcs.n	80014c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e032      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4916      	ldr	r1, [pc, #88]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fe:	f000 f855 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8001502:	4602      	mov	r2, r0
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	490a      	ldr	r1, [pc, #40]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb6e 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00
 8001534:	40023800 	.word	0x40023800
 8001538:	08003dc4 	.word	0x08003dc4
 800153c:	20000010 	.word	0x20000010
 8001540:	20000014 	.word	0x20000014

08001544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_RCC_GetHCLKFreq+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000010 	.word	0x20000010

0800155c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001560:	f7ff fff0 	bl	8001544 <HAL_RCC_GetHCLKFreq>
 8001564:	4602      	mov	r2, r0
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	0a9b      	lsrs	r3, r3, #10
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	4903      	ldr	r1, [pc, #12]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001572:	5ccb      	ldrb	r3, [r1, r3]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	08003dd4 	.word	0x08003dd4

08001584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001588:	f7ff ffdc 	bl	8001544 <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0b5b      	lsrs	r3, r3, #13
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	08003dd4 	.word	0x08003dd4

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b0:	b0a6      	sub	sp, #152	; 0x98
 80015b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015d2:	4bc8      	ldr	r3, [pc, #800]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	f200 817e 	bhi.w	80018dc <HAL_RCC_GetSysClockFreq+0x330>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	0800161d 	.word	0x0800161d
 80015ec:	080018dd 	.word	0x080018dd
 80015f0:	080018dd 	.word	0x080018dd
 80015f4:	080018dd 	.word	0x080018dd
 80015f8:	08001625 	.word	0x08001625
 80015fc:	080018dd 	.word	0x080018dd
 8001600:	080018dd 	.word	0x080018dd
 8001604:	080018dd 	.word	0x080018dd
 8001608:	0800162d 	.word	0x0800162d
 800160c:	080018dd 	.word	0x080018dd
 8001610:	080018dd 	.word	0x080018dd
 8001614:	080018dd 	.word	0x080018dd
 8001618:	08001797 	.word	0x08001797
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4bb6      	ldr	r3, [pc, #728]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800161e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001622:	e15f      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001624:	4bb5      	ldr	r3, [pc, #724]	; (80018fc <HAL_RCC_GetSysClockFreq+0x350>)
 8001626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800162a:	e15b      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800162c:	4bb1      	ldr	r3, [pc, #708]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001638:	4bae      	ldr	r3, [pc, #696]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d031      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001644:	4bab      	ldr	r3, [pc, #684]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	2200      	movs	r2, #0
 800164c:	66bb      	str	r3, [r7, #104]	; 0x68
 800164e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001656:	663b      	str	r3, [r7, #96]	; 0x60
 8001658:	2300      	movs	r3, #0
 800165a:	667b      	str	r3, [r7, #100]	; 0x64
 800165c:	4ba7      	ldr	r3, [pc, #668]	; (80018fc <HAL_RCC_GetSysClockFreq+0x350>)
 800165e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001662:	462a      	mov	r2, r5
 8001664:	fb03 f202 	mul.w	r2, r3, r2
 8001668:	2300      	movs	r3, #0
 800166a:	4621      	mov	r1, r4
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	4aa2      	ldr	r2, [pc, #648]	; (80018fc <HAL_RCC_GetSysClockFreq+0x350>)
 8001674:	4621      	mov	r1, r4
 8001676:	fba1 1202 	umull	r1, r2, r1, r2
 800167a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800167c:	460a      	mov	r2, r1
 800167e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001680:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001682:	4413      	add	r3, r2
 8001684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168a:	2200      	movs	r2, #0
 800168c:	65bb      	str	r3, [r7, #88]	; 0x58
 800168e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001690:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001694:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001698:	f7fe fdb4 	bl	8000204 <__aeabi_uldivmod>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4613      	mov	r3, r2
 80016a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016a6:	e064      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b92      	ldr	r3, [pc, #584]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	653b      	str	r3, [r7, #80]	; 0x50
 80016b2:	657a      	str	r2, [r7, #84]	; 0x54
 80016b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80016bc:	2300      	movs	r3, #0
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80016c4:	4622      	mov	r2, r4
 80016c6:	462b      	mov	r3, r5
 80016c8:	f04f 0000 	mov.w	r0, #0
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	0159      	lsls	r1, r3, #5
 80016d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d6:	0150      	lsls	r0, r2, #5
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4621      	mov	r1, r4
 80016de:	1a51      	subs	r1, r2, r1
 80016e0:	6139      	str	r1, [r7, #16]
 80016e2:	4629      	mov	r1, r5
 80016e4:	eb63 0301 	sbc.w	r3, r3, r1
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016f6:	4659      	mov	r1, fp
 80016f8:	018b      	lsls	r3, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001700:	4651      	mov	r1, sl
 8001702:	018a      	lsls	r2, r1, #6
 8001704:	4651      	mov	r1, sl
 8001706:	ebb2 0801 	subs.w	r8, r2, r1
 800170a:	4659      	mov	r1, fp
 800170c:	eb63 0901 	sbc.w	r9, r3, r1
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800171c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001724:	4690      	mov	r8, r2
 8001726:	4699      	mov	r9, r3
 8001728:	4623      	mov	r3, r4
 800172a:	eb18 0303 	adds.w	r3, r8, r3
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	462b      	mov	r3, r5
 8001732:	eb49 0303 	adc.w	r3, r9, r3
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001744:	4629      	mov	r1, r5
 8001746:	028b      	lsls	r3, r1, #10
 8001748:	4621      	mov	r1, r4
 800174a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800174e:	4621      	mov	r1, r4
 8001750:	028a      	lsls	r2, r1, #10
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175a:	2200      	movs	r2, #0
 800175c:	643b      	str	r3, [r7, #64]	; 0x40
 800175e:	647a      	str	r2, [r7, #68]	; 0x44
 8001760:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001764:	f7fe fd4e 	bl	8000204 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001772:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	3301      	adds	r3, #1
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001784:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001794:	e0a6      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001796:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800179e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a2:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02a      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ae:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	2200      	movs	r2, #0
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017c0:	2100      	movs	r1, #0
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_RCC_GetSysClockFreq+0x350>)
 80017c4:	fb03 f201 	mul.w	r2, r3, r1
 80017c8:	2300      	movs	r3, #0
 80017ca:	fb00 f303 	mul.w	r3, r0, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_RCC_GetSysClockFreq+0x350>)
 80017d2:	fba0 1202 	umull	r1, r2, r0, r2
 80017d6:	677a      	str	r2, [r7, #116]	; 0x74
 80017d8:	460a      	mov	r2, r1
 80017da:	673a      	str	r2, [r7, #112]	; 0x70
 80017dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017de:	4413      	add	r3, r2
 80017e0:	677b      	str	r3, [r7, #116]	; 0x74
 80017e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017e6:	2200      	movs	r2, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ea:	637a      	str	r2, [r7, #52]	; 0x34
 80017ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017f4:	f7fe fd06 	bl	8000204 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001802:	e05b      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
 800180e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001820:	4642      	mov	r2, r8
 8001822:	464b      	mov	r3, r9
 8001824:	f04f 0000 	mov.w	r0, #0
 8001828:	f04f 0100 	mov.w	r1, #0
 800182c:	0159      	lsls	r1, r3, #5
 800182e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001832:	0150      	lsls	r0, r2, #5
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4641      	mov	r1, r8
 800183a:	ebb2 0a01 	subs.w	sl, r2, r1
 800183e:	4649      	mov	r1, r9
 8001840:	eb63 0b01 	sbc.w	fp, r3, r1
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001858:	ebb2 040a 	subs.w	r4, r2, sl
 800185c:	eb63 050b 	sbc.w	r5, r3, fp
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	00eb      	lsls	r3, r5, #3
 800186a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186e:	00e2      	lsls	r2, r4, #3
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	4643      	mov	r3, r8
 8001876:	18e3      	adds	r3, r4, r3
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	464b      	mov	r3, r9
 800187c:	eb45 0303 	adc.w	r3, r5, r3
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188e:	4629      	mov	r1, r5
 8001890:	028b      	lsls	r3, r1, #10
 8001892:	4621      	mov	r1, r4
 8001894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001898:	4621      	mov	r1, r4
 800189a:	028a      	lsls	r2, r1, #10
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018a4:	2200      	movs	r2, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	61fa      	str	r2, [r7, #28]
 80018aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ae:	f7fe fca9 	bl	8000204 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0f1b      	lsrs	r3, r3, #28
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80018ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018da:	e003      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80018e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3798      	adds	r7, #152	; 0x98
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	017d7840 	.word	0x017d7840

08001900 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e28d      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8083 	beq.w	8001a26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001920:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b04      	cmp	r3, #4
 800192a:	d019      	beq.n	8001960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800192c:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001934:	2b08      	cmp	r3, #8
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001938:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001944:	d00c      	beq.n	8001960 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d112      	bne.n	8001978 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800195e:	d10b      	bne.n	8001978 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d05b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x124>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d157      	bne.n	8001a24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e25a      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x90>
 8001982:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xcc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xb4>
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a72      	ldr	r2, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xcc>
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6b      	ldr	r2, [pc, #428]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f958 	bl	8000c88 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff f954 	bl	8000c88 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e21f      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xdc>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f944 	bl	8000c88 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff f940 	bl	8000c88 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e20b      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x104>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06f      	beq.n	8001b12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a32:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d017      	beq.n	8001a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x186>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1d3      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4937      	ldr	r1, [pc, #220]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x278>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8ed 	bl	8000c88 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8e9 	bl	8000c88 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1b4      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4925      	ldr	r1, [pc, #148]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x278>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f8cc 	bl	8000c88 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f8c8 	bl	8000c88 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e193      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f8ac 	bl	8000c88 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f8a8 	bl	8000c88 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e173      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x234>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_OscConfig+0x27c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f895 	bl	8000c88 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f891 	bl	8000c88 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d907      	bls.n	8001b80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e15c      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b8a      	ldr	r3, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ea      	bne.n	8001b62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b7f      	ldr	r3, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a7e      	ldr	r2, [pc, #504]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a75      	ldr	r2, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff f851 	bl	8000c88 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff f84d 	bl	8000c88 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e118      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x4b0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x31e>
 8001c10:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x358>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x340>
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a60      	ldr	r2, [pc, #384]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a5d      	ldr	r2, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x358>
 8001c40:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a59      	ldr	r2, [pc, #356]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f812 	bl	8000c88 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f80e 	bl	8000c88 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0d7      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x368>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe fffc 	bl	8000c88 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe fff8 	bl	8000c88 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0c1      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80ad 	beq.w	8001e2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d060      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d145      	bne.n	8001d72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ffcc 	bl	8000c88 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe ffc8 	bl	8000c88 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e093      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	071b      	lsls	r3, r3, #28
 8001d3e:	491b      	ldr	r1, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff9d 	bl	8000c88 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe ff99 	bl	8000c88 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e064      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x452>
 8001d70:	e05c      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCC_OscConfig+0x4b4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ff86 	bl	8000c88 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe ff82 	bl	8000c88 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04d      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x480>
 8001d9e:	e045      	b.n	8001e2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_RCC_OscConfig+0x538>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d030      	beq.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d129      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d122      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d119      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	085b      	lsrs	r3, r3, #1
 8001e00:	3b01      	subs	r3, #1
 8001e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10f      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e041      	b.n	8001ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fdb8 	bl	80009d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 fa96 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d001      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e04e      	b.n	8001f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d01d      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d018      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_TIM_Base_Start_IT+0xd0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00e      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x80>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d111      	bne.n	8001f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d010      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7e:	e007      	b.n	8001f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40010400 	.word	0x40010400
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	40001800 	.word	0x40001800

08001fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0202 	mvn.w	r2, #2
 8001fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f9b5 	bl	800236e <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9a7 	bl	800235a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f9b8 	bl	8002382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b04      	cmp	r3, #4
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0204 	mvn.w	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f98b 	bl	800236e <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f97d 	bl	800235a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f98e 	bl	8002382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b08      	cmp	r3, #8
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0208 	mvn.w	r2, #8
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2204      	movs	r2, #4
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f961 	bl	800236e <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f953 	bl	800235a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f964 	bl	8002382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0210 	mvn.w	r2, #16
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2208      	movs	r2, #8
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f937 	bl	800236e <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f929 	bl	800235a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f93a 	bl	8002382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0201 	mvn.w	r2, #1
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe f9e4 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa64 	bl	8002634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002184:	2b40      	cmp	r3, #64	; 0x40
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8ff 	bl	8002396 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0220 	mvn.w	r2, #32
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa2e 	bl	8002620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIM_ConfigClockSource+0x1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0b4      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x186>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800220e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002220:	d03e      	beq.n	80022a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	f200 8087 	bhi.w	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	f000 8086 	beq.w	800233e <HAL_TIM_ConfigClockSource+0x172>
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	d87f      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002238:	2b70      	cmp	r3, #112	; 0x70
 800223a:	d01a      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0xa6>
 800223c:	2b70      	cmp	r3, #112	; 0x70
 800223e:	d87b      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002240:	2b60      	cmp	r3, #96	; 0x60
 8002242:	d050      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002244:	2b60      	cmp	r3, #96	; 0x60
 8002246:	d877      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002248:	2b50      	cmp	r3, #80	; 0x50
 800224a:	d03c      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xfa>
 800224c:	2b50      	cmp	r3, #80	; 0x50
 800224e:	d873      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d058      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x13a>
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d86f      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b30      	cmp	r3, #48	; 0x30
 800225a:	d064      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x15a>
 800225c:	2b30      	cmp	r3, #48	; 0x30
 800225e:	d86b      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b20      	cmp	r3, #32
 8002262:	d060      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x15a>
 8002264:	2b20      	cmp	r3, #32
 8002266:	d867      	bhi.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05c      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x15a>
 800226c:	2b10      	cmp	r3, #16
 800226e:	d05a      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0x15a>
 8002270:	e062      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f000 f9ad 	bl	80025e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	609a      	str	r2, [r3, #8]
      break;
 800229e:	e04f      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6899      	ldr	r1, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f000 f996 	bl	80025e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c2:	609a      	str	r2, [r3, #8]
      break;
 80022c4:	e03c      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f000 f90a 	bl	80024ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2150      	movs	r1, #80	; 0x50
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f963 	bl	80025aa <TIM_ITRx_SetConfig>
      break;
 80022e4:	e02c      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f929 	bl	800254a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2160      	movs	r1, #96	; 0x60
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f953 	bl	80025aa <TIM_ITRx_SetConfig>
      break;
 8002304:	e01c      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f000 f8ea 	bl	80024ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2140      	movs	r1, #64	; 0x40
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f943 	bl	80025aa <TIM_ITRx_SetConfig>
      break;
 8002324:	e00c      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f000 f93a 	bl	80025aa <TIM_ITRx_SetConfig>
      break;
 8002336:	e003      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      break;
 800233c:	e000      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800233e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d00f      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <TIM_Base_SetConfig+0x118>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00b      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <TIM_Base_SetConfig+0x11c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <TIM_Base_SetConfig+0x120>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d003      	beq.n	80023ec <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d027      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <TIM_Base_SetConfig+0x118>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d023      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2b      	ldr	r2, [pc, #172]	; (80024c8 <TIM_Base_SetConfig+0x11c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <TIM_Base_SetConfig+0x120>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d017      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <TIM_Base_SetConfig+0x128>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <TIM_Base_SetConfig+0x12c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00f      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <TIM_Base_SetConfig+0x130>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00b      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <TIM_Base_SetConfig+0x134>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <TIM_Base_SetConfig+0x138>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d003      	beq.n	800245e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <TIM_Base_SetConfig+0x13c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d108      	bne.n	8002470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <TIM_Base_SetConfig+0x114>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d003      	beq.n	80024a4 <TIM_Base_SetConfig+0xf8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <TIM_Base_SetConfig+0x124>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40010400 	.word	0x40010400
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800
 80024e0:	40001800 	.word	0x40001800
 80024e4:	40001c00 	.word	0x40001c00
 80024e8:	40002000 	.word	0x40002000

080024ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0201 	bic.w	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 030a 	bic.w	r3, r3, #10
 8002528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	621a      	str	r2, [r3, #32]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800254a:	b480      	push	{r7}
 800254c:	b087      	sub	sp, #28
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f023 0210 	bic.w	r2, r3, #16
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f043 0307 	orr.w	r3, r3, #7
 80025cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	431a      	orrs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e03f      	b.n	80026da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe f9da 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fddf 	bl	8003250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b08a      	sub	sp, #40	; 0x28
 80026e6:	af02      	add	r7, sp, #8
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d17c      	bne.n	80027fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_UART_Transmit+0x2c>
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e075      	b.n	80027fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_UART_Transmit+0x3e>
 800271c:	2302      	movs	r3, #2
 800271e:	e06e      	b.n	80027fe <HAL_UART_Transmit+0x11c>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	; 0x21
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002736:	f7fe faa7 	bl	8000c88 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002750:	d108      	bne.n	8002764 <HAL_UART_Transmit+0x82>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e003      	b.n	800276c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002774:	e02a      	b.n	80027cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fb1f 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e036      	b.n	80027fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	3302      	adds	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e007      	b.n	80027be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	3301      	adds	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1cf      	bne.n	8002776 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	2140      	movs	r1, #64	; 0x40
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 faef 	bl	8002dc4 <UART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b20      	cmp	r3, #32
 800281e:	d11d      	bne.n	800285c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_UART_Receive_IT+0x26>
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e016      	b.n	800285e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_UART_Receive_IT+0x38>
 800283a:	2302      	movs	r3, #2
 800283c:	e00f      	b.n	800285e <HAL_UART_Receive_IT+0x58>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	461a      	mov	r2, r3
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fb24 	bl	8002ea0 <UART_Start_Receive_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	e000      	b.n	800285e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0ba      	sub	sp, #232	; 0xe8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_UART_IRQHandler+0x66>
 80028ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fc07 	bl	80030da <UART_Receive_IT>
      return;
 80028cc:	e256      	b.n	8002d7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80de 	beq.w	8002a94 <HAL_UART_IRQHandler+0x22c>
 80028d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80d1 	beq.w	8002a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_UART_IRQHandler+0xae>
 80028fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_UART_IRQHandler+0xd2>
 8002922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0202 	orr.w	r2, r3, #2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800293a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_UART_IRQHandler+0xf6>
 8002946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_UART_IRQHandler+0x126>
 800296a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0208 	orr.w	r2, r3, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 81ed 	beq.w	8002d72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_UART_IRQHandler+0x14e>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fb92 	bl	80030da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_UART_IRQHandler+0x17a>
 80029da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04f      	beq.n	8002a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fa9a 	bl	8002f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d141      	bne.n	8002a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3314      	adds	r3, #20
 8002a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1d9      	bne.n	80029f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d013      	beq.n	8002a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	4a7d      	ldr	r2, [pc, #500]	; (8002c44 <HAL_UART_IRQHandler+0x3dc>)
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe faa3 	bl	8000fa2 <HAL_DMA_Abort_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e00e      	b.n	8002a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f990 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	e00a      	b.n	8002a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f98c 	bl	8002d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	e006      	b.n	8002a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f988 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a8e:	e170      	b.n	8002d72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	bf00      	nop
    return;
 8002a92:	e16e      	b.n	8002d72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 814a 	bne.w	8002d32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8143 	beq.w	8002d32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 813c 	beq.w	8002d32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	f040 80b4 	bne.w	8002c48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8140 	beq.w	8002d76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002afe:	429a      	cmp	r2, r3
 8002b00:	f080 8139 	bcs.w	8002d76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b16:	f000 8088 	beq.w	8002c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1d9      	bne.n	8002b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e1      	bne.n	8002b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e3      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	f023 0310 	bic.w	r3, r3, #16
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e3      	bne.n	8002be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f94c 	bl	8000ec2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8b6 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c40:	e099      	b.n	8002d76 <HAL_UART_IRQHandler+0x50e>
 8002c42:	bf00      	nop
 8002c44:	08002fe3 	.word	0x08002fe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 808b 	beq.w	8002d7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8086 	beq.w	8002d7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c92:	647a      	str	r2, [r7, #68]	; 0x44
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e3      	bne.n	8002c6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cca:	633a      	str	r2, [r7, #48]	; 0x30
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e3      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d10:	61fa      	str	r2, [r7, #28]
 8002d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	69b9      	ldr	r1, [r7, #24]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e3      	bne.n	8002cec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f83e 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d30:	e023      	b.n	8002d7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_UART_IRQHandler+0x4ea>
 8002d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f95d 	bl	800300a <UART_Transmit_IT>
    return;
 8002d50:	e014      	b.n	8002d7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <HAL_UART_IRQHandler+0x514>
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f99d 	bl	80030aa <UART_EndTransmit_IT>
    return;
 8002d70:	e004      	b.n	8002d7c <HAL_UART_IRQHandler+0x514>
    return;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_UART_IRQHandler+0x514>
      return;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_UART_IRQHandler+0x514>
      return;
 8002d7a:	bf00      	nop
  }
}
 8002d7c:	37e8      	adds	r7, #232	; 0xe8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop

08002d84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b090      	sub	sp, #64	; 0x40
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd4:	e050      	b.n	8002e78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d04c      	beq.n	8002e78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de4:	f7fd ff50 	bl	8000c88 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d241      	bcs.n	8002e78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e14:	637a      	str	r2, [r7, #52]	; 0x34
 8002e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e5      	bne.n	8002df4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	613b      	str	r3, [r7, #16]
   return(result);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3314      	adds	r3, #20
 8002e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e48:	623a      	str	r2, [r7, #32]
 8002e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	69f9      	ldr	r1, [r7, #28]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	e841 2300 	strex	r3, r2, [r1]
 8002e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e00f      	b.n	8002e98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4013      	ands	r3, r2
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d09f      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3740      	adds	r7, #64	; 0x40
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2222      	movs	r2, #34	; 0x22
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0220 	orr.w	r2, r2, #32
 8002f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b095      	sub	sp, #84	; 0x54
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f44:	643a      	str	r2, [r7, #64]	; 0x40
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e5      	bne.n	8002f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3314      	adds	r3, #20
 8002f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f80:	e841 2300 	strex	r3, r2, [r1]
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e5      	bne.n	8002f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d119      	bne.n	8002fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
 8002fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0310 	bic.w	r3, r3, #16
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb4:	61ba      	str	r2, [r7, #24]
 8002fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e5      	bne.n	8002f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fd6:	bf00      	nop
 8002fd8:	3754      	adds	r7, #84	; 0x54
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff fecb 	bl	8002d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b21      	cmp	r3, #33	; 0x21
 800301c:	d13e      	bne.n	800309c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d114      	bne.n	8003052 <UART_Transmit_IT+0x48>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d110      	bne.n	8003052 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003044:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]
 8003050:	e008      	b.n	8003064 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6211      	str	r1, [r2, #32]
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29b      	uxth	r3, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4619      	mov	r1, r3
 8003072:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10f      	bne.n	8003098 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003086:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003096:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe5a 	bl	8002d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b08c      	sub	sp, #48	; 0x30
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b22      	cmp	r3, #34	; 0x22
 80030ec:	f040 80ab 	bne.w	8003246 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d117      	bne.n	800312a <UART_Receive_IT+0x50>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d113      	bne.n	800312a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	b29a      	uxth	r2, r3
 800311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	1c9a      	adds	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
 8003128:	e026      	b.n	8003178 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	d007      	beq.n	800314e <UART_Receive_IT+0x74>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <UART_Receive_IT+0x82>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e008      	b.n	800316e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003168:	b2da      	uxtb	r2, r3
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003188:	2b00      	cmp	r3, #0
 800318a:	d15a      	bne.n	8003242 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0220 	bic.w	r2, r2, #32
 800319a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d135      	bne.n	8003238 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	613b      	str	r3, [r7, #16]
   return(result);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f023 0310 	bic.w	r3, r3, #16
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	623a      	str	r2, [r7, #32]
 80031f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	69f9      	ldr	r1, [r7, #28]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e5      	bne.n	80031d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d10a      	bne.n	800322a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fdbb 	bl	8002dac <HAL_UARTEx_RxEventCallback>
 8003236:	e002      	b.n	800323e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd f991 	bl	8000560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e002      	b.n	8003248 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3730      	adds	r7, #48	; 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b0c0      	sub	sp, #256	; 0x100
 8003256:	af00      	add	r7, sp, #0
 8003258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	ea40 0301 	orr.w	r3, r0, r1
 8003278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032a8:	f021 010c 	bic.w	r1, r1, #12
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032b6:	430b      	orrs	r3, r1
 80032b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	6999      	ldr	r1, [r3, #24]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	ea40 0301 	orr.w	r3, r0, r1
 80032d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8f      	ldr	r3, [pc, #572]	; (800351c <UART_SetConfig+0x2cc>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d005      	beq.n	80032f0 <UART_SetConfig+0xa0>
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b8d      	ldr	r3, [pc, #564]	; (8003520 <UART_SetConfig+0x2d0>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d104      	bne.n	80032fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe f948 	bl	8001584 <HAL_RCC_GetPCLK2Freq>
 80032f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032f8:	e003      	b.n	8003302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fa:	f7fe f92f 	bl	800155c <HAL_RCC_GetPCLK1Freq>
 80032fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	f040 810c 	bne.w	8003528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800331a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800331e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	1891      	adds	r1, r2, r2
 8003328:	65b9      	str	r1, [r7, #88]	; 0x58
 800332a:	415b      	adcs	r3, r3
 800332c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003332:	4621      	mov	r1, r4
 8003334:	eb12 0801 	adds.w	r8, r2, r1
 8003338:	4629      	mov	r1, r5
 800333a:	eb43 0901 	adc.w	r9, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003352:	4690      	mov	r8, r2
 8003354:	4699      	mov	r9, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb18 0303 	adds.w	r3, r8, r3
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800337a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800337e:	460b      	mov	r3, r1
 8003380:	18db      	adds	r3, r3, r3
 8003382:	653b      	str	r3, [r7, #80]	; 0x50
 8003384:	4613      	mov	r3, r2
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	657b      	str	r3, [r7, #84]	; 0x54
 800338c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003394:	f7fc ff36 	bl	8000204 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <UART_SetConfig+0x2d4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	64b9      	str	r1, [r7, #72]	; 0x48
 80033c0:	415b      	adcs	r3, r3
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033c8:	4641      	mov	r1, r8
 80033ca:	eb12 0a01 	adds.w	sl, r2, r1
 80033ce:	4649      	mov	r1, r9
 80033d0:	eb43 0b01 	adc.w	fp, r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e8:	4692      	mov	sl, r2
 80033ea:	469b      	mov	fp, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	eb1a 0303 	adds.w	r3, sl, r3
 80033f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f6:	464b      	mov	r3, r9
 80033f8:	eb4b 0303 	adc.w	r3, fp, r3
 80033fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800340c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003414:	460b      	mov	r3, r1
 8003416:	18db      	adds	r3, r3, r3
 8003418:	643b      	str	r3, [r7, #64]	; 0x40
 800341a:	4613      	mov	r3, r2
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800342a:	f7fc feeb 	bl	8000204 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4611      	mov	r1, r2
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <UART_SetConfig+0x2d4>)
 8003436:	fba3 2301 	umull	r2, r3, r3, r1
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2264      	movs	r2, #100	; 0x64
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <UART_SetConfig+0x2d4>)
 800344c:	fba3 2302 	umull	r2, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003458:	441c      	add	r4, r3
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	63b9      	str	r1, [r7, #56]	; 0x38
 8003474:	415b      	adcs	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6339      	str	r1, [r7, #48]	; 0x30
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b0:	464b      	mov	r3, r9
 80034b2:	460a      	mov	r2, r1
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034d0:	460b      	mov	r3, r1
 80034d2:	18db      	adds	r3, r3, r3
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	4613      	mov	r3, r2
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034e6:	f7fc fe8d 	bl	8000204 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <UART_SetConfig+0x2d4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <UART_SetConfig+0x2d4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 0207 	and.w	r2, r3, #7
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4422      	add	r2, r4
 8003516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003518:	e105      	b.n	8003726 <UART_SetConfig+0x4d6>
 800351a:	bf00      	nop
 800351c:	40011000 	.word	0x40011000
 8003520:	40011400 	.word	0x40011400
 8003524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800353a:	4642      	mov	r2, r8
 800353c:	464b      	mov	r3, r9
 800353e:	1891      	adds	r1, r2, r2
 8003540:	6239      	str	r1, [r7, #32]
 8003542:	415b      	adcs	r3, r3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354a:	4641      	mov	r1, r8
 800354c:	1854      	adds	r4, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb43 0501 	adc.w	r5, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	00eb      	lsls	r3, r5, #3
 800355e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003562:	00e2      	lsls	r2, r4, #3
 8003564:	4614      	mov	r4, r2
 8003566:	461d      	mov	r5, r3
 8003568:	4643      	mov	r3, r8
 800356a:	18e3      	adds	r3, r4, r3
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003570:	464b      	mov	r3, r9
 8003572:	eb45 0303 	adc.w	r3, r5, r3
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003596:	4629      	mov	r1, r5
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4621      	mov	r1, r4
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035a8:	f7fc fe2c 	bl	8000204 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b60      	ldr	r3, [pc, #384]	; (8003734 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2302 	umull	r2, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	011c      	lsls	r4, r3, #4
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	61b9      	str	r1, [r7, #24]
 80035d4:	415b      	adcs	r3, r3
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6139      	str	r1, [r7, #16]
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	67bb      	str	r3, [r7, #120]	; 0x78
 8003626:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003634:	4649      	mov	r1, r9
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363e:	4641      	mov	r1, r8
 8003640:	008a      	lsls	r2, r1, #2
 8003642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003646:	f7fc fddd 	bl	8000204 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <UART_SetConfig+0x4e4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a34      	ldr	r2, [pc, #208]	; (8003734 <UART_SetConfig+0x4e4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366e:	441c      	add	r4, r3
 8003670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003674:	2200      	movs	r2, #0
 8003676:	673b      	str	r3, [r7, #112]	; 0x70
 8003678:	677a      	str	r2, [r7, #116]	; 0x74
 800367a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800367e:	4642      	mov	r2, r8
 8003680:	464b      	mov	r3, r9
 8003682:	1891      	adds	r1, r2, r2
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	415b      	adcs	r3, r3
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800368e:	4641      	mov	r1, r8
 8003690:	1851      	adds	r1, r2, r1
 8003692:	6039      	str	r1, [r7, #0]
 8003694:	4649      	mov	r1, r9
 8003696:	414b      	adcs	r3, r1
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036a6:	4659      	mov	r1, fp
 80036a8:	00cb      	lsls	r3, r1, #3
 80036aa:	4651      	mov	r1, sl
 80036ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b0:	4651      	mov	r1, sl
 80036b2:	00ca      	lsls	r2, r1, #3
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	4603      	mov	r3, r0
 80036ba:	4642      	mov	r2, r8
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c0:	464b      	mov	r3, r9
 80036c2:	460a      	mov	r2, r1
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	663b      	str	r3, [r7, #96]	; 0x60
 80036d4:	667a      	str	r2, [r7, #100]	; 0x64
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036e2:	4649      	mov	r1, r9
 80036e4:	008b      	lsls	r3, r1, #2
 80036e6:	4641      	mov	r1, r8
 80036e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ec:	4641      	mov	r1, r8
 80036ee:	008a      	lsls	r2, r1, #2
 80036f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036f4:	f7fc fd86 	bl	8000204 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <UART_SetConfig+0x4e4>)
 80036fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2164      	movs	r1, #100	; 0x64
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	; 0x32
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <UART_SetConfig+0x4e4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4422      	add	r2, r4
 8003724:	609a      	str	r2, [r3, #8]
}
 8003726:	bf00      	nop
 8003728:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003732:	bf00      	nop
 8003734:	51eb851f 	.word	0x51eb851f

08003738 <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	73bb      	strb	r3, [r7, #14]
 8003750:	e00d      	b.n	800376e <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 8003752:	7bbb      	ldrb	r3, [r7, #14]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f810 	bl	8003784 <calcCrc8>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8003768:	7bbb      	ldrb	r3, [r7, #14]
 800376a:	3301      	adds	r3, #1
 800376c:	73bb      	strb	r3, [r7, #14]
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	b29b      	uxth	r3, r3
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	429a      	cmp	r2, r3
 8003776:	d8ec      	bhi.n	8003752 <genCrc+0x1a>
    }

  return crc;
 8003778:	7bfb      	ldrb	r3, [r7, #15]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	460a      	mov	r2, r1
 800378e:	71fb      	strb	r3, [r7, #7]
 8003790:	4613      	mov	r3, r2
 8003792:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8003798:	79fa      	ldrb	r2, [r7, #7]
 800379a:	79bb      	ldrb	r3, [r7, #6]
 800379c:	4053      	eors	r3, r2
 800379e:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	121b      	asrs	r3, r3, #8
 80037a4:	b25a      	sxtb	r2, r3
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	4905      	ldr	r1, [pc, #20]	; (80037c0 <calcCrc8+0x3c>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	4053      	eors	r3, r2
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	08003ddc 	.word	0x08003ddc

080037c4 <dataPacketRxInit>:
 */

#include <dataPacketRx.h>

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
 80037d0:	4613      	mov	r3, r2
 80037d2:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2219      	movs	r2, #25
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fad1 	bl	8003d9c <memset>
	dataPacketRx->crc8 = 0x00;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	775a      	strb	r2, [r3, #29]
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	331e      	adds	r3, #30
 8003804:	221e      	movs	r2, #30
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fac7 	bl	8003d9c <memset>
	dataPacketRx->dataPacketLength = 0x00;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->currentRxByteIndex = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	dataPacketRx->containsStarterBytes = FALSE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->starterByteIndex = 0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dataPacketRx->decodeTries = 0;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	779a      	strb	r2, [r3, #30]
	dataPacketRx->currentRxByteIndex++;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	3301      	adds	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800386c:	3301      	adds	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	879a      	strh	r2, [r3, #60]	; 0x3c

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	2b1e      	cmp	r3, #30
 800387a:	d908      	bls.n	800388e <dataPacketRxAppend+0x4c>
	{
		dataPacketRxClear(dataPacketRx);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8d8 	bl	8003a32 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	87da      	strh	r2, [r3, #62]	; 0x3e
		dataPacketRx->dataPacketLength = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d174      	bne.n	8003992 <dataPacketRxDecode+0xfc>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80038ae:	3302      	adds	r3, #2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	7f9b      	ldrb	r3, [r3, #30]
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8ef 	bl	8003a9c <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80038c4:	3303      	adds	r3, #3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	7f9a      	ldrb	r2, [r3, #30]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	78db      	ldrb	r3, [r3, #3]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d122      	bne.n	800391e <dataPacketRxDecode+0x88>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80038de:	3304      	adds	r3, #4
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	7f9b      	ldrb	r3, [r3, #30]
 80038e6:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	331e      	adds	r3, #30
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80038f2:	4413      	add	r3, r2
 80038f4:	2104      	movs	r1, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff1e 	bl	8003738 <genCrc>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	775a      	strb	r2, [r3, #29]

			if (dataPacketRx->crc8 == receivedCrc8)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7f5b      	ldrb	r3, [r3, #29]
 8003908:	7b3a      	ldrb	r2, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d174      	bne.n	80039f8 <dataPacketRxDecode+0x162>
			{
				dataPacketRx->currentRxByteIndex = 0;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391c:	e06c      	b.n	80039f8 <dataPacketRxDecode+0x162>
			}
		}
		else
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	7f9b      	ldrb	r3, [r3, #30]
 8003934:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	331e      	adds	r3, #30
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003940:	441a      	add	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3304      	adds	r3, #4
 800394a:	b29b      	uxth	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7ff fef2 	bl	8003738 <genCrc>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	775a      	strb	r2, [r3, #29]

			if (dataPacketRx->crc8 == receivedCrc8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7f5b      	ldrb	r3, [r3, #29]
 8003960:	7b7a      	ldrb	r2, [r7, #13]
 8003962:	429a      	cmp	r2, r3
 8003964:	d148      	bne.n	80039f8 <dataPacketRxDecode+0x162>
			{
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f103 021e 	add.w	r2, r3, #30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003972:	3304      	adds	r3, #4
 8003974:	18d1      	adds	r1, r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	78db      	ldrb	r3, [r3, #3]
 800397a:	461a      	mov	r2, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8b3 	bl	8003ae8 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003990:	e032      	b.n	80039f8 <dataPacketRxDecode+0x162>
			}
		}
	}
	else
	{
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003996:	2b04      	cmp	r3, #4
 8003998:	d92e      	bls.n	80039f8 <dataPacketRxDecode+0x162>
		{
			uint16_t index = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 800399e:	2300      	movs	r3, #0
 80039a0:	81fb      	strh	r3, [r7, #14]
 80039a2:	e01c      	b.n	80039de <dataPacketRxDecode+0x148>
			{
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	7f9a      	ldrb	r2, [r3, #30]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d111      	bne.n	80039d8 <dataPacketRxDecode+0x142>
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	3301      	adds	r3, #1
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4413      	add	r3, r2
 80039bc:	7f9a      	ldrb	r2, [r3, #30]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d108      	bne.n	80039d8 <dataPacketRxDecode+0x142>
				{
					dataPacketRx->containsStarterBytes = TRUE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					dataPacketRx->starterByteIndex = index;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	89fa      	ldrh	r2, [r7, #14]
 80039d2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					break;
 80039d6:	e007      	b.n	80039e8 <dataPacketRxDecode+0x152>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 80039d8:	89fb      	ldrh	r3, [r7, #14]
 80039da:	3301      	adds	r3, #1
 80039dc:	81fb      	strh	r3, [r7, #14]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80039e2:	89fa      	ldrh	r2, [r7, #14]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3dd      	bcc.n	80039a4 <dataPacketRxDecode+0x10e>
				}
			}

			if (dataPacketRx->containsStarterBytes == FALSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <dataPacketRxDecode+0x162>
			{
				dataPacketRxClear(dataPacketRx);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f81d 	bl	8003a32 <dataPacketRxClear>
			}
		}
	}

	if (dataPacketRx->dataPacketRxStatus == INVALID_RX_DATA_PACKET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <dataPacketRxDecode+0x194>
	{
		dataPacketRx->decodeTries++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a08:	3301      	adds	r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (dataPacketRx->decodeTries >= 30)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a18:	2b1d      	cmp	r3, #29
 8003a1a:	d906      	bls.n	8003a2a <dataPacketRxDecode+0x194>
		{
			dataPacketRxClear(dataPacketRx);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f808 	bl	8003a32 <dataPacketRxClear>
			dataPacketRx->decodeTries = 0;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		}
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	dataPacketRx->containsStarterBytes = FALSE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->currentRxByteIndex = 0;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength = 0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->payloadDataLength = 0;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	775a      	strb	r2, [r3, #29]
	dataPacketRx->starterByteIndex = 0;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dataPacketRx->decodeTries = 0;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2219      	movs	r2, #25
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f98b 	bl	8003d9c <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	331e      	adds	r3, #30
 8003a8a:	221e      	movs	r2, #30
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f984 	bl	8003d9c <memset>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	if ((command < 0x01) || (command > 0xFE))
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d006      	beq.n	8003ac4 <dataPacketRxSetCommand+0x28>
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d003      	beq.n	8003ac4 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	709a      	strb	r2, [r3, #2]
 8003ac2:	e000      	b.n	8003ac6 <dataPacketRxSetCommand+0x2a>
		return;
 8003ac4:	bf00      	nop
}
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	789b      	ldrb	r3, [r3, #2]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3304      	adds	r3, #4
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f93a 	bl	8003d80 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	79fa      	ldrb	r2, [r7, #7]
 8003b10:	70da      	strb	r2, [r3, #3]
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <dataPacketTxInit>:
 */

#include <dataPacketTx.h>

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
 8003b40:	4613      	mov	r3, r2
 8003b42:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	78ba      	ldrb	r2, [r7, #2]
 8003b4e:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2219      	movs	r2, #25
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f919 	bl	8003d9c <memset>
	dataPacketTx->crc8 = 0x00;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	775a      	strb	r2, [r3, #29]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	331e      	adds	r3, #30
 8003b74:	221e      	movs	r2, #30
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f90f 	bl	8003d9c <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	785a      	ldrb	r2, [r3, #1]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	77da      	strb	r2, [r3, #31]
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	789a      	ldrb	r2, [r3, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	78da      	ldrb	r2, [r3, #3]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	331e      	adds	r3, #30
 8003bc4:	1d18      	adds	r0, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	1d19      	adds	r1, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	78db      	ldrb	r3, [r3, #3]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f8d6 	bl	8003d80 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	78db      	ldrb	r3, [r3, #3]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3305      	adds	r3, #5
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f103 021e 	add.w	r2, r3, #30
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7ff fda0 	bl	8003738 <genCrc>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	775a      	strb	r2, [r3, #29]
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	78db      	ldrb	r3, [r3, #3]
 8003c04:	3304      	adds	r3, #4
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	7f51      	ldrb	r1, [r2, #29]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	460a      	mov	r2, r1
 8003c10:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8003c22:	b084      	sub	sp, #16
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	f107 0014 	add.w	r0, r7, #20
 8003c30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10a      	bne.n	8003c54 <dataPacketTxUartSend+0x32>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f103 011e 	add.w	r1, r3, #30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003c48:	f107 0014 	add.w	r0, r7, #20
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	f7fe fd47 	bl	80026e2 <HAL_UART_Transmit>
	}
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c5e:	b004      	add	sp, #16
 8003c60:	4770      	bx	lr

08003c62 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	331e      	adds	r3, #30
 8003c88:	221e      	movs	r2, #30
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f885 	bl	8003d9c <memset>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2219      	movs	r2, #25
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f869 	bl	8003d9c <memset>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if ((command < 0x01) || (command > 0xFE))
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <dataPacketTxSetCommand+0x28>
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2bff      	cmp	r3, #255	; 0xff
 8003cf0:	d003      	beq.n	8003cfa <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	709a      	strb	r2, [r3, #2]
 8003cf8:	e000      	b.n	8003cfc <dataPacketTxSetCommand+0x2a>
		return;
 8003cfa:	bf00      	nop
}
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	79fa      	ldrb	r2, [r7, #7]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f82b 	bl	8003d80 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	79fa      	ldrb	r2, [r7, #7]
 8003d2e:	70da      	strb	r2, [r3, #3]
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <__libc_init_array>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4d0d      	ldr	r5, [pc, #52]	; (8003d70 <__libc_init_array+0x38>)
 8003d3c:	4c0d      	ldr	r4, [pc, #52]	; (8003d74 <__libc_init_array+0x3c>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	2600      	movs	r6, #0
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	d109      	bne.n	8003d5c <__libc_init_array+0x24>
 8003d48:	4d0b      	ldr	r5, [pc, #44]	; (8003d78 <__libc_init_array+0x40>)
 8003d4a:	4c0c      	ldr	r4, [pc, #48]	; (8003d7c <__libc_init_array+0x44>)
 8003d4c:	f000 f82e 	bl	8003dac <_init>
 8003d50:	1b64      	subs	r4, r4, r5
 8003d52:	10a4      	asrs	r4, r4, #2
 8003d54:	2600      	movs	r6, #0
 8003d56:	42a6      	cmp	r6, r4
 8003d58:	d105      	bne.n	8003d66 <__libc_init_array+0x2e>
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d60:	4798      	blx	r3
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7ee      	b.n	8003d44 <__libc_init_array+0xc>
 8003d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6a:	4798      	blx	r3
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	e7f2      	b.n	8003d56 <__libc_init_array+0x1e>
 8003d70:	08003ee4 	.word	0x08003ee4
 8003d74:	08003ee4 	.word	0x08003ee4
 8003d78:	08003ee4 	.word	0x08003ee4
 8003d7c:	08003ee8 	.word	0x08003ee8

08003d80 <memcpy>:
 8003d80:	440a      	add	r2, r1
 8003d82:	4291      	cmp	r1, r2
 8003d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d88:	d100      	bne.n	8003d8c <memcpy+0xc>
 8003d8a:	4770      	bx	lr
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d96:	4291      	cmp	r1, r2
 8003d98:	d1f9      	bne.n	8003d8e <memcpy+0xe>
 8003d9a:	bd10      	pop	{r4, pc}

08003d9c <memset>:
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	f803 1b01 	strb.w	r1, [r3], #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <_init>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr

08003db8 <_fini>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr
