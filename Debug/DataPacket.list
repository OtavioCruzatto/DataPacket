
DataPacket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a00  08003a00  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a08  08003a08  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000001c  08003a2c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003a2c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee04  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa5  00000000  00000000  0002ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00030df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00031b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022019  00000000  00000000  00032790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010222  00000000  00000000  000547a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd5a  00000000  00000000  000649cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  00134778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080038d0 	.word	0x080038d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	080038d0 	.word	0x080038d0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d110      	bne.n	800053a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		counterTimer1++;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000520:	6013      	str	r3, [r2, #0]
		if (counterTimer1 >= DELAY_1_SECOND)
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f242 720f 	movw	r2, #9999	; 0x270f
 800052a:	4293      	cmp	r3, r2
 800052c:	d905      	bls.n	800053a <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			counterTimer1 = 0;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
			flag_counter_1 = ACTIVE;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000038 	.word	0x20000038
 800054c:	20000108 	.word	0x20000108
 8000550:	2000010c 	.word	0x2000010c

08000554 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_UART_RxCpltCallback+0x24>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d104      	bne.n	800056e <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart2, &rx1_char, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	4905      	ldr	r1, [pc, #20]	; (800057c <HAL_UART_RxCpltCallback+0x28>)
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <HAL_UART_RxCpltCallback+0x24>)
 800056a:	f002 f8a8 	bl	80026be <HAL_UART_Receive_IT>
	}
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000080 	.word	0x20000080
 800057c:	20000104 	.word	0x20000104

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b08f      	sub	sp, #60	; 0x3c
 8000584:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa8f 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f84d 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f919 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8ed 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000596:	f000 f8b3 	bl	8000700 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <main+0x90>)
 800059c:	f001 fbfa 	bl	8001d94 <HAL_TIM_Base_Start_IT>
  dataPacketTxInit(&dataPacketTx, 0xAA, 0x55);
 80005a0:	2255      	movs	r2, #85	; 0x55
 80005a2:	21aa      	movs	r1, #170	; 0xaa
 80005a4:	481b      	ldr	r0, [pc, #108]	; (8000614 <main+0x94>)
 80005a6:	f003 f869 	bl	800367c <dataPacketTxInit>
  HAL_UART_Receive_IT(&huart2, &rx1_char, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	491a      	ldr	r1, [pc, #104]	; (8000618 <main+0x98>)
 80005ae:	481b      	ldr	r0, [pc, #108]	; (800061c <main+0x9c>)
 80005b0:	f002 f885 	bl	80026be <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_counter_1 == ACTIVE)
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <main+0xa0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1fb      	bne.n	80005b4 <main+0x34>
	  {
		  dataPacketTxSetCommand(&dataPacketTx, 0x01);
 80005bc:	2101      	movs	r1, #1
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0x94>)
 80005c0:	f003 f919 	bl	80037f6 <dataPacketTxSetCommand>
		  dataPacketTxSetPayloadData(&dataPacketTx, bytes, 16);
 80005c4:	2210      	movs	r2, #16
 80005c6:	4917      	ldr	r1, [pc, #92]	; (8000624 <main+0xa4>)
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <main+0x94>)
 80005ca:	f003 f92e 	bl	800382a <dataPacketTxSetPayloadData>
		  dataPacketTxMount(&dataPacketTx);
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0x94>)
 80005d0:	f003 f884 	bl	80036dc <dataPacketTxMount>
		  dataPacketTxUartSend(&dataPacketTx, huart2);
 80005d4:	4e11      	ldr	r6, [pc, #68]	; (800061c <main+0x9c>)
 80005d6:	466d      	mov	r5, sp
 80005d8:	f106 040c 	add.w	r4, r6, #12
 80005dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80005f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x94>)
 80005f6:	f003 f8b8 	bl	800376a <dataPacketTxUartSend>
		  dataPacketTxPayloadDataClear(&dataPacketTx);
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <main+0x94>)
 80005fc:	f003 f8e8 	bl	80037d0 <dataPacketTxPayloadDataClear>
		  dataPacketTxClear(&dataPacketTx);
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <main+0x94>)
 8000602:	f003 f8d2 	bl	80037aa <dataPacketTxClear>

		  flag_counter_1 = INACTIVE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <main+0xa0>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	  if (flag_counter_1 == ACTIVE)
 800060c:	e7d2      	b.n	80005b4 <main+0x34>
 800060e:	bf00      	nop
 8000610:	20000038 	.word	0x20000038
 8000614:	200000c4 	.word	0x200000c4
 8000618:	20000104 	.word	0x20000104
 800061c:	20000080 	.word	0x20000080
 8000620:	2000010c 	.word	0x2000010c
 8000624:	20000000 	.word	0x20000000

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f942 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80006a0:	235a      	movs	r3, #90	; 0x5a
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f87f 	bl	80017b8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c0:	f000 f8d2 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fda5 	bl	8001230 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006ec:	f000 f8bc 	bl	8000868 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM9_Init+0x68>)
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_TIM9_Init+0x6c>)
 8000716:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_TIM9_Init+0x68>)
 800071a:	2263      	movs	r2, #99	; 0x63
 800071c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_TIM9_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 90;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_TIM9_Init+0x68>)
 8000726:	225a      	movs	r2, #90	; 0x5a
 8000728:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_TIM9_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_TIM9_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000736:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_TIM9_Init+0x68>)
 8000738:	f001 fadc 	bl	8001cf4 <HAL_TIM_Base_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f891 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_TIM9_Init+0x68>)
 8000752:	f001 fc97 	bl	8002084 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f884 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000038 	.word	0x20000038
 800076c:	40014000 	.word	0x40014000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 feaa 	bl	8002500 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f859 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000080 	.word	0x20000080
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_GPIO_Init+0x98>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_GPIO_Init+0x98>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_GPIO_Init+0x98>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_GPIO_Init+0x98>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_GPIO_Init+0x98>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_GPIO_Init+0x98>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000818:	f000 fcf0 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_GPIO_Init+0xa0>)
 8000832:	f000 fb4f 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000836:	2320      	movs	r3, #32
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x9c>)
 800084e:	f000 fb41 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d115      	bne.n	8000902 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_TIM_Base_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <HAL_TIM_Base_MspInit+0x4c>)
 80008e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_TIM_Base_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2018      	movs	r0, #24
 80008f8:	f000 fa23 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80008fc:	2018      	movs	r0, #24
 80008fe:	f000 fa3c 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40014000 	.word	0x40014000
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <HAL_UART_MspInit+0x94>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d133      	bne.n	800099e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x98>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x98>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_UART_MspInit+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_UART_MspInit+0x9c>)
 800098a:	f000 faa3 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2026      	movs	r0, #38	; 0x26
 8000994:	f000 f9d5 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000998:	2026      	movs	r0, #38	; 0x26
 800099a:	f000 f9ee 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f8a4 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a0e:	f001 fa31 	bl	8001e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000038 	.word	0x20000038

08000a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <USART2_IRQHandler+0x10>)
 8000a22:	f001 fe7d 	bl	8002720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000080 	.word	0x20000080

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 feeb 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd7b 	bl	8000580 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a98:	08003a10 	.word	0x08003a10
  ldr r2, =_sbss
 8000a9c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000aa0:	20000114 	.word	0x20000114

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f92b 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff feca 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f943 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f90b 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000010 	.word	0x20000010
 8000b44:	20000018 	.word	0x20000018
 8000b48:	20000014 	.word	0x20000014

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000018 	.word	0x20000018
 8000b70:	20000110 	.word	0x20000110

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000110 	.word	0x20000110

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff feda 	bl	8000b74 <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d008      	beq.n	8000de0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e052      	b.n	8000e86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0216 	bic.w	r2, r2, #22
 8000dee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695a      	ldr	r2, [r3, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d103      	bne.n	8000e10 <HAL_DMA_Abort+0x62>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0208 	bic.w	r2, r2, #8
 8000e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e30:	e013      	b.n	8000e5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e32:	f7ff fe9f 	bl	8000b74 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d90c      	bls.n	8000e5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2220      	movs	r2, #32
 8000e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e015      	b.n	8000e86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e4      	bne.n	8000e32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6c:	223f      	movs	r2, #63	; 0x3f
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d004      	beq.n	8000eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00c      	b.n	8000ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e165      	b.n	80011bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8154 	bne.w	80011b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80ae 	beq.w	80011b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b5d      	ldr	r3, [pc, #372]	; (80011d4 <HAL_GPIO_Init+0x300>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a5c      	ldr	r2, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x300>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x308>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x310>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x20a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x206>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x202>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <HAL_GPIO_Init+0x324>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <HAL_GPIO_Init+0x324>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x324>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x324>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x324>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_GPIO_Init+0x324>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_GPIO_Init+0x324>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_GPIO_Init+0x324>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae96 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0cc      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90c      	bls.n	800126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b8      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a58      	ldr	r2, [pc, #352]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d044      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e067      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4934      	ldr	r1, [pc, #208]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fc28 	bl	8000b74 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fc24 	bl	8000b74 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e04f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d20c      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e032      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490e      	ldr	r1, [pc, #56]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f855 	bl	8001464 <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fb88 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00
 80013ec:	40023800 	.word	0x40023800
 80013f0:	080038e8 	.word	0x080038e8
 80013f4:	20000010 	.word	0x20000010
 80013f8:	20000014 	.word	0x20000014

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_GetHCLKFreq+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000010 	.word	0x20000010

08001414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001418:	f7ff fff0 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0a9b      	lsrs	r3, r3, #10
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	080038f8 	.word	0x080038f8

0800143c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001440:	f7ff ffdc 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	0b5b      	lsrs	r3, r3, #13
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	4903      	ldr	r1, [pc, #12]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	080038f8 	.word	0x080038f8

08001464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001468:	b0a6      	sub	sp, #152	; 0x98
 800146a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800148a:	4bc8      	ldr	r3, [pc, #800]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b0c      	cmp	r3, #12
 8001494:	f200 817e 	bhi.w	8001794 <HAL_RCC_GetSysClockFreq+0x330>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014d5 	.word	0x080014d5
 80014a4:	08001795 	.word	0x08001795
 80014a8:	08001795 	.word	0x08001795
 80014ac:	08001795 	.word	0x08001795
 80014b0:	080014dd 	.word	0x080014dd
 80014b4:	08001795 	.word	0x08001795
 80014b8:	08001795 	.word	0x08001795
 80014bc:	08001795 	.word	0x08001795
 80014c0:	080014e5 	.word	0x080014e5
 80014c4:	08001795 	.word	0x08001795
 80014c8:	08001795 	.word	0x08001795
 80014cc:	08001795 	.word	0x08001795
 80014d0:	0800164f 	.word	0x0800164f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d4:	4bb6      	ldr	r3, [pc, #728]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80014d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80014da:	e15f      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014dc:	4bb5      	ldr	r3, [pc, #724]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x350>)
 80014de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80014e2:	e15b      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e4:	4bb1      	ldr	r3, [pc, #708]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f0:	4bae      	ldr	r3, [pc, #696]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d031      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	4bab      	ldr	r3, [pc, #684]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	099b      	lsrs	r3, r3, #6
 8001502:	2200      	movs	r2, #0
 8001504:	66bb      	str	r3, [r7, #104]	; 0x68
 8001506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800150a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
 8001510:	2300      	movs	r3, #0
 8001512:	667b      	str	r3, [r7, #100]	; 0x64
 8001514:	4ba7      	ldr	r3, [pc, #668]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001516:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800151a:	462a      	mov	r2, r5
 800151c:	fb03 f202 	mul.w	r2, r3, r2
 8001520:	2300      	movs	r3, #0
 8001522:	4621      	mov	r1, r4
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	4aa2      	ldr	r2, [pc, #648]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800152c:	4621      	mov	r1, r4
 800152e:	fba1 1202 	umull	r1, r2, r1, r2
 8001532:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001534:	460a      	mov	r2, r1
 8001536:	67ba      	str	r2, [r7, #120]	; 0x78
 8001538:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800153a:	4413      	add	r3, r2
 800153c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800153e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001542:	2200      	movs	r2, #0
 8001544:	65bb      	str	r3, [r7, #88]	; 0x58
 8001546:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001548:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800154c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001550:	f7fe fe58 	bl	8000204 <__aeabi_uldivmod>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4613      	mov	r3, r2
 800155a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800155e:	e064      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001560:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	2200      	movs	r2, #0
 8001568:	653b      	str	r3, [r7, #80]	; 0x50
 800156a:	657a      	str	r2, [r7, #84]	; 0x54
 800156c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800156e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
 8001574:	2300      	movs	r3, #0
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001578:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800157c:	4622      	mov	r2, r4
 800157e:	462b      	mov	r3, r5
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	0159      	lsls	r1, r3, #5
 800158a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800158e:	0150      	lsls	r0, r2, #5
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4621      	mov	r1, r4
 8001596:	1a51      	subs	r1, r2, r1
 8001598:	6139      	str	r1, [r7, #16]
 800159a:	4629      	mov	r1, r5
 800159c:	eb63 0301 	sbc.w	r3, r3, r1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015ae:	4659      	mov	r1, fp
 80015b0:	018b      	lsls	r3, r1, #6
 80015b2:	4651      	mov	r1, sl
 80015b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015b8:	4651      	mov	r1, sl
 80015ba:	018a      	lsls	r2, r1, #6
 80015bc:	4651      	mov	r1, sl
 80015be:	ebb2 0801 	subs.w	r8, r2, r1
 80015c2:	4659      	mov	r1, fp
 80015c4:	eb63 0901 	sbc.w	r9, r3, r1
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	4623      	mov	r3, r4
 80015e2:	eb18 0303 	adds.w	r3, r8, r3
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	462b      	mov	r3, r5
 80015ea:	eb49 0303 	adc.w	r3, r9, r3
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015fc:	4629      	mov	r1, r5
 80015fe:	028b      	lsls	r3, r1, #10
 8001600:	4621      	mov	r1, r4
 8001602:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001606:	4621      	mov	r1, r4
 8001608:	028a      	lsls	r2, r1, #10
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001612:	2200      	movs	r2, #0
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
 8001616:	647a      	str	r2, [r7, #68]	; 0x44
 8001618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800161c:	f7fe fdf2 	bl	8000204 <__aeabi_uldivmod>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4613      	mov	r3, r2
 8001626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800162a:	4b60      	ldr	r3, [pc, #384]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	3301      	adds	r3, #1
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800163c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800164c:	e0a6      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165a:	4b54      	ldr	r3, [pc, #336]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d02a      	beq.n	80016bc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4b51      	ldr	r3, [pc, #324]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	099b      	lsrs	r3, r3, #6
 800166c:	2200      	movs	r2, #0
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001670:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001678:	2100      	movs	r1, #0
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800167c:	fb03 f201 	mul.w	r2, r3, r1
 8001680:	2300      	movs	r3, #0
 8001682:	fb00 f303 	mul.w	r3, r0, r3
 8001686:	4413      	add	r3, r2
 8001688:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x350>)
 800168a:	fba0 1202 	umull	r1, r2, r0, r2
 800168e:	677a      	str	r2, [r7, #116]	; 0x74
 8001690:	460a      	mov	r2, r1
 8001692:	673a      	str	r2, [r7, #112]	; 0x70
 8001694:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001696:	4413      	add	r3, r2
 8001698:	677b      	str	r3, [r7, #116]	; 0x74
 800169a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800169e:	2200      	movs	r2, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
 80016a2:	637a      	str	r2, [r7, #52]	; 0x34
 80016a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80016ac:	f7fe fdaa 	bl	8000204 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4613      	mov	r3, r2
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016ba:	e05b      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	2200      	movs	r2, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016d8:	4642      	mov	r2, r8
 80016da:	464b      	mov	r3, r9
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0159      	lsls	r1, r3, #5
 80016e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ea:	0150      	lsls	r0, r2, #5
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4641      	mov	r1, r8
 80016f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f6:	4649      	mov	r1, r9
 80016f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800170c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001710:	ebb2 040a 	subs.w	r4, r2, sl
 8001714:	eb63 050b 	sbc.w	r5, r3, fp
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4643      	mov	r3, r8
 800172e:	18e3      	adds	r3, r4, r3
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	464b      	mov	r3, r9
 8001734:	eb45 0303 	adc.w	r3, r5, r3
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001746:	4629      	mov	r1, r5
 8001748:	028b      	lsls	r3, r1, #10
 800174a:	4621      	mov	r1, r4
 800174c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001750:	4621      	mov	r1, r4
 8001752:	028a      	lsls	r2, r1, #10
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175c:	2200      	movs	r2, #0
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	61fa      	str	r2, [r7, #28]
 8001762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001766:	f7fe fd4d 	bl	8000204 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4613      	mov	r3, r2
 8001770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_GetSysClockFreq+0x348>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0f1b      	lsrs	r3, r3, #28
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001782:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001792:	e003      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800179a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3798      	adds	r7, #152	; 0x98
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	017d7840 	.word	0x017d7840

080017b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e28d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8083 	beq.w	80018de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d8:	4b94      	ldr	r3, [pc, #592]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d019      	beq.n	8001818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e4:	4b91      	ldr	r3, [pc, #580]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f0:	4b8e      	ldr	r3, [pc, #568]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017fc:	d00c      	beq.n	8001818 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b8b      	ldr	r3, [pc, #556]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b84      	ldr	r3, [pc, #528]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d05b      	beq.n	80018dc <HAL_RCC_OscConfig+0x124>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d157      	bne.n	80018dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e25a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x90>
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7b      	ldr	r2, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xcc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xb4>
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a75      	ldr	r2, [pc, #468]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a72      	ldr	r2, [pc, #456]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xcc>
 800186c:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6b      	ldr	r2, [pc, #428]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f972 	bl	8000b74 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff f96e 	bl	8000b74 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e21f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xdc>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f95e 	bl	8000b74 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff f95a 	bl	8000b74 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e20b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x104>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d06f      	beq.n	80019ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ea:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d017      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d11c      	bne.n	8001954 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x186>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1d3      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	e03a      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <HAL_RCC_OscConfig+0x278>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff f907 	bl	8000b74 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff f903 	bl	8000b74 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1b4      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4925      	ldr	r1, [pc, #148]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x278>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f8e6 	bl	8000b74 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff f8e2 	bl	8000b74 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e193      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d036      	beq.n	8001a44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d016      	beq.n	8001a0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f8c6 	bl	8000b74 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff f8c2 	bl	8000b74 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e173      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_OscConfig+0x274>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x234>
 8001a0a:	e01b      	b.n	8001a44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff f8af 	bl	8000b74 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	e00e      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f8ab 	bl	8000b74 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d907      	bls.n	8001a38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e15c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	42470000 	.word	0x42470000
 8001a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	4b8a      	ldr	r3, [pc, #552]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ea      	bne.n	8001a1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8097 	beq.w	8001b80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b83      	ldr	r3, [pc, #524]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b7f      	ldr	r3, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a7e      	ldr	r2, [pc, #504]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b7c      	ldr	r3, [pc, #496]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b79      	ldr	r3, [pc, #484]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8e:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a75      	ldr	r2, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f86b 	bl	8000b74 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa2:	f7ff f867 	bl	8000b74 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e118      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x4b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x31e>
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a65      	ldr	r2, [pc, #404]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x340>
 8001ade:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a5d      	ldr	r2, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0x358>
 8001af8:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f82c 	bl	8000b74 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f828 	bl	8000b74 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0d7      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ee      	beq.n	8001b20 <HAL_RCC_OscConfig+0x368>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f816 	bl	8000b74 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f812 	bl	8000b74 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0c1      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	4a3a      	ldr	r2, [pc, #232]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80ad 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d060      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d145      	bne.n	8001c2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ffe6 	bl	8000b74 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe ffe2 	bl	8000b74 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e093      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69da      	ldr	r2, [r3, #28]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	071b      	lsls	r3, r3, #28
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7fe ffb7 	bl	8000b74 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe ffb3 	bl	8000b74 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e064      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x452>
 8001c28:	e05c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_RCC_OscConfig+0x4b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffa0 	bl	8000b74 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe ff9c 	bl	8000b74 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x480>
 8001c56:	e045      	b.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e040      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x538>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d030      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d129      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d122      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d119      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e041      	b.n	8001d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fdd2 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 fa96 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d001      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04e      	b.n	8001e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d022      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd6:	d01d      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d018      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d111      	bne.n	8001e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d010      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e36:	e007      	b.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40001800 	.word	0x40001800

08001e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0202 	mvn.w	r2, #2
 8001ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f9b5 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9a7 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f9b8 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d122      	bne.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11b      	bne.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0204 	mvn.w	r2, #4
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f98b 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f97d 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f98e 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d122      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d11b      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0208 	mvn.w	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f961 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f953 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f964 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0210 	mvn.w	r2, #16
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f937 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f929 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f93a 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0201 	mvn.w	r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fa88 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa64 	bl	80024ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8ff 	bl	800224e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b20      	cmp	r3, #32
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0220 	mvn.w	r2, #32
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa2e 	bl	80024d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_TIM_ConfigClockSource+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e0b4      	b.n	800220a <HAL_TIM_ConfigClockSource+0x186>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d8:	d03e      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0xd4>
 80020da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020de:	f200 8087 	bhi.w	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e6:	f000 8086 	beq.w	80021f6 <HAL_TIM_ConfigClockSource+0x172>
 80020ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ee:	d87f      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 80020f0:	2b70      	cmp	r3, #112	; 0x70
 80020f2:	d01a      	beq.n	800212a <HAL_TIM_ConfigClockSource+0xa6>
 80020f4:	2b70      	cmp	r3, #112	; 0x70
 80020f6:	d87b      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 80020f8:	2b60      	cmp	r3, #96	; 0x60
 80020fa:	d050      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x11a>
 80020fc:	2b60      	cmp	r3, #96	; 0x60
 80020fe:	d877      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002100:	2b50      	cmp	r3, #80	; 0x50
 8002102:	d03c      	beq.n	800217e <HAL_TIM_ConfigClockSource+0xfa>
 8002104:	2b50      	cmp	r3, #80	; 0x50
 8002106:	d873      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d058      	beq.n	80021be <HAL_TIM_ConfigClockSource+0x13a>
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d86f      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002110:	2b30      	cmp	r3, #48	; 0x30
 8002112:	d064      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x15a>
 8002114:	2b30      	cmp	r3, #48	; 0x30
 8002116:	d86b      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002118:	2b20      	cmp	r3, #32
 800211a:	d060      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x15a>
 800211c:	2b20      	cmp	r3, #32
 800211e:	d867      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d05c      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x15a>
 8002124:	2b10      	cmp	r3, #16
 8002126:	d05a      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x15a>
 8002128:	e062      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f000 f9ad 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800214c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	609a      	str	r2, [r3, #8]
      break;
 8002156:	e04f      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f000 f996 	bl	8002498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217a:	609a      	str	r2, [r3, #8]
      break;
 800217c:	e03c      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	f000 f90a 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2150      	movs	r1, #80	; 0x50
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f963 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 800219c:	e02c      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f000 f929 	bl	8002402 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2160      	movs	r1, #96	; 0x60
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f953 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021bc:	e01c      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f000 f8ea 	bl	80023a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f943 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021dc:	e00c      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f000 f93a 	bl	8002462 <TIM_ITRx_SetConfig>
      break;
 80021ee:	e003      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e000      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	; (8002378 <TIM_Base_SetConfig+0x114>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d00f      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3d      	ldr	r2, [pc, #244]	; (800237c <TIM_Base_SetConfig+0x118>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <TIM_Base_SetConfig+0x11c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <TIM_Base_SetConfig+0x120>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <TIM_Base_SetConfig+0x124>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d108      	bne.n	80022b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <TIM_Base_SetConfig+0x114>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d027      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <TIM_Base_SetConfig+0x118>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d023      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <TIM_Base_SetConfig+0x11c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <TIM_Base_SetConfig+0x120>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <TIM_Base_SetConfig+0x124>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d017      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a28      	ldr	r2, [pc, #160]	; (800238c <TIM_Base_SetConfig+0x128>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <TIM_Base_SetConfig+0x12c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00f      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <TIM_Base_SetConfig+0x130>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a25      	ldr	r2, [pc, #148]	; (8002398 <TIM_Base_SetConfig+0x134>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <TIM_Base_SetConfig+0x138>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <TIM_Base_SetConfig+0x13c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <TIM_Base_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <TIM_Base_SetConfig+0x124>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d103      	bne.n	8002364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	615a      	str	r2, [r3, #20]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800
 8002384:	40000c00 	.word	0x40000c00
 8002388:	40010400 	.word	0x40010400
 800238c:	40014000 	.word	0x40014000
 8002390:	40014400 	.word	0x40014400
 8002394:	40014800 	.word	0x40014800
 8002398:	40001800 	.word	0x40001800
 800239c:	40001c00 	.word	0x40001c00
 80023a0:	40002000 	.word	0x40002000

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 030a 	bic.w	r3, r3, #10
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0210 	bic.w	r2, r3, #16
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800242c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	031b      	lsls	r3, r3, #12
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	f043 0307 	orr.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e03f      	b.n	8002592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe f9f4 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fddf 	bl	8003108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d17c      	bne.n	80026b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_UART_Transmit+0x2c>
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e075      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x3e>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e06e      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fac1 	bl	8000b74 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d108      	bne.n	800261c <HAL_UART_Transmit+0x82>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e003      	b.n	8002624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800262c:	e02a      	b.n	8002684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fb1f 	bl	8002c7c <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e036      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3302      	adds	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e007      	b.n	8002676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1cf      	bne.n	800262e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 faef 	bl	8002c7c <UART_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d11d      	bne.n	8002714 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_UART_Receive_IT+0x26>
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e016      	b.n	8002716 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Receive_IT+0x38>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00f      	b.n	8002716 <HAL_UART_Receive_IT+0x58>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	461a      	mov	r2, r3
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb24 	bl	8002d58 <UART_Start_Receive_IT>
 8002710:	4603      	mov	r3, r0
 8002712:	e000      	b.n	8002716 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002714:	2302      	movs	r3, #2
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0ba      	sub	sp, #232	; 0xe8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800275e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_UART_IRQHandler+0x66>
 8002772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fc07 	bl	8002f92 <UART_Receive_IT>
      return;
 8002784:	e256      	b.n	8002c34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80de 	beq.w	800294c <HAL_UART_IRQHandler+0x22c>
 8002790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80d1 	beq.w	800294c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_UART_IRQHandler+0xae>
 80027b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f043 0201 	orr.w	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_UART_IRQHandler+0xd2>
 80027da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_UART_IRQHandler+0xf6>
 80027fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f043 0204 	orr.w	r2, r3, #4
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d011      	beq.n	8002846 <HAL_UART_IRQHandler+0x126>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800282e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0208 	orr.w	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 81ed 	beq.w	8002c2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_UART_IRQHandler+0x14e>
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fb92 	bl	8002f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_UART_IRQHandler+0x17a>
 8002892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d04f      	beq.n	800293a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa9a 	bl	8002dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d141      	bne.n	8002932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3314      	adds	r3, #20
 80028b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3314      	adds	r3, #20
 80028d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1d9      	bne.n	80028ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d013      	beq.n	800292a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	4a7d      	ldr	r2, [pc, #500]	; (8002afc <HAL_UART_IRQHandler+0x3dc>)
 8002908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fabd 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002924:	4610      	mov	r0, r2
 8002926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e00e      	b.n	8002948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f990 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002930:	e00a      	b.n	8002948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f98c 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	e006      	b.n	8002948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f988 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002946:	e170      	b.n	8002c2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	bf00      	nop
    return;
 800294a:	e16e      	b.n	8002c2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	2b01      	cmp	r3, #1
 8002952:	f040 814a 	bne.w	8002bea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8143 	beq.w	8002bea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 813c 	beq.w	8002bea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	f040 80b4 	bne.w	8002b00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8140 	beq.w	8002c2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029b6:	429a      	cmp	r2, r3
 80029b8:	f080 8139 	bcs.w	8002c2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ce:	f000 8088 	beq.w	8002ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1d9      	bne.n	80029d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3314      	adds	r3, #20
 8002a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e1      	bne.n	8002a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e3      	bne.n	8002a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e3      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f966 	bl	8000dae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8b6 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002af8:	e099      	b.n	8002c2e <HAL_UART_IRQHandler+0x50e>
 8002afa:	bf00      	nop
 8002afc:	08002e9b 	.word	0x08002e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 808b 	beq.w	8002c32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b52:	e841 2300 	strex	r3, r2, [r1]
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e3      	bne.n	8002b26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b82:	633a      	str	r2, [r7, #48]	; 0x30
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e3      	bne.n	8002b5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bc8:	61fa      	str	r2, [r7, #28]
 8002bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	69b9      	ldr	r1, [r7, #24]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e3      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f83e 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be8:	e023      	b.n	8002c32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_UART_IRQHandler+0x4ea>
 8002bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f95d 	bl	8002ec2 <UART_Transmit_IT>
    return;
 8002c08:	e014      	b.n	8002c34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <HAL_UART_IRQHandler+0x514>
 8002c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f99d 	bl	8002f62 <UART_EndTransmit_IT>
    return;
 8002c28:	e004      	b.n	8002c34 <HAL_UART_IRQHandler+0x514>
    return;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <HAL_UART_IRQHandler+0x514>
      return;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <HAL_UART_IRQHandler+0x514>
      return;
 8002c32:	bf00      	nop
  }
}
 8002c34:	37e8      	adds	r7, #232	; 0xe8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop

08002c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b090      	sub	sp, #64	; 0x40
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8c:	e050      	b.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d04c      	beq.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <UART_WaitOnFlagUntilTimeout+0x30>
 8002c9c:	f7fd ff6a 	bl	8000b74 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d241      	bcs.n	8002d30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3314      	adds	r3, #20
 8002cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d00:	623a      	str	r2, [r7, #32]
 8002d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	69f9      	ldr	r1, [r7, #28]
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e5      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e00f      	b.n	8002d50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d09f      	beq.n	8002c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3740      	adds	r7, #64	; 0x40
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2222      	movs	r2, #34	; 0x22
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b095      	sub	sp, #84	; 0x54
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dfc:	643a      	str	r2, [r7, #64]	; 0x40
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e04:	e841 2300 	strex	r3, r2, [r1]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e5      	bne.n	8002ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3314      	adds	r3, #20
 8002e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e5      	bne.n	8002e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d119      	bne.n	8002e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e6c:	61ba      	str	r2, [r7, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6979      	ldr	r1, [r7, #20]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e8e:	bf00      	nop
 8002e90:	3754      	adds	r7, #84	; 0x54
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff fecb 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b21      	cmp	r3, #33	; 0x21
 8002ed4:	d13e      	bne.n	8002f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ede:	d114      	bne.n	8002f0a <UART_Transmit_IT+0x48>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d110      	bne.n	8002f0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	621a      	str	r2, [r3, #32]
 8002f08:	e008      	b.n	8002f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	1c59      	adds	r1, r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6211      	str	r1, [r2, #32]
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fe5a 	bl	8002c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b08c      	sub	sp, #48	; 0x30
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b22      	cmp	r3, #34	; 0x22
 8002fa4:	f040 80ab 	bne.w	80030fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d117      	bne.n	8002fe2 <UART_Receive_IT+0x50>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	1c9a      	adds	r2, r3, #2
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe0:	e026      	b.n	8003030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d007      	beq.n	8003006 <UART_Receive_IT+0x74>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <UART_Receive_IT+0x82>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e008      	b.n	8003026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003020:	b2da      	uxtb	r2, r3
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29b      	uxth	r3, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4619      	mov	r1, r3
 800303e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003040:	2b00      	cmp	r3, #0
 8003042:	d15a      	bne.n	80030fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0220 	bic.w	r2, r2, #32
 8003052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	2b01      	cmp	r3, #1
 8003082:	d135      	bne.n	80030f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	613b      	str	r3, [r7, #16]
   return(result);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f023 0310 	bic.w	r3, r3, #16
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	623a      	str	r2, [r7, #32]
 80030ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	69f9      	ldr	r1, [r7, #28]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d10a      	bne.n	80030e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fdbb 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
 80030ee:	e002      	b.n	80030f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fa2f 	bl	8000554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e002      	b.n	8003100 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3730      	adds	r7, #48	; 0x30
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0c0      	sub	sp, #256	; 0x100
 800310e:	af00      	add	r7, sp, #0
 8003110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	ea40 0301 	orr.w	r3, r0, r1
 8003130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003160:	f021 010c 	bic.w	r1, r1, #12
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316e:	430b      	orrs	r3, r1
 8003170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	6999      	ldr	r1, [r3, #24]
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	ea40 0301 	orr.w	r3, r0, r1
 800318e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <UART_SetConfig+0x2cc>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d005      	beq.n	80031a8 <UART_SetConfig+0xa0>
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <UART_SetConfig+0x2d0>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d104      	bne.n	80031b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe f948 	bl	800143c <HAL_RCC_GetPCLK2Freq>
 80031ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b0:	e003      	b.n	80031ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7fe f92f 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 80031b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	f040 810c 	bne.w	80033e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031da:	4622      	mov	r2, r4
 80031dc:	462b      	mov	r3, r5
 80031de:	1891      	adds	r1, r2, r2
 80031e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80031e2:	415b      	adcs	r3, r3
 80031e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ea:	4621      	mov	r1, r4
 80031ec:	eb12 0801 	adds.w	r8, r2, r1
 80031f0:	4629      	mov	r1, r5
 80031f2:	eb43 0901 	adc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003218:	462b      	mov	r3, r5
 800321a:	eb49 0303 	adc.w	r3, r9, r3
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003236:	460b      	mov	r3, r1
 8003238:	18db      	adds	r3, r3, r3
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
 800323c:	4613      	mov	r3, r2
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	657b      	str	r3, [r7, #84]	; 0x54
 8003244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800324c:	f7fc ffda 	bl	8000204 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4b61      	ldr	r3, [pc, #388]	; (80033dc <UART_SetConfig+0x2d4>)
 8003256:	fba3 2302 	umull	r2, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	011c      	lsls	r4, r3, #4
 800325e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800326c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	1891      	adds	r1, r2, r2
 8003276:	64b9      	str	r1, [r7, #72]	; 0x48
 8003278:	415b      	adcs	r3, r3
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003280:	4641      	mov	r1, r8
 8003282:	eb12 0a01 	adds.w	sl, r2, r1
 8003286:	4649      	mov	r1, r9
 8003288:	eb43 0b01 	adc.w	fp, r3, r1
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800329c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a0:	4692      	mov	sl, r2
 80032a2:	469b      	mov	fp, r3
 80032a4:	4643      	mov	r3, r8
 80032a6:	eb1a 0303 	adds.w	r3, sl, r3
 80032aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb4b 0303 	adc.w	r3, fp, r3
 80032b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032cc:	460b      	mov	r3, r1
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	643b      	str	r3, [r7, #64]	; 0x40
 80032d2:	4613      	mov	r3, r2
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
 80032da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032e2:	f7fc ff8f 	bl	8000204 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <UART_SetConfig+0x2d4>)
 80032ee:	fba3 2301 	umull	r2, r3, r3, r1
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2264      	movs	r2, #100	; 0x64
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	1acb      	subs	r3, r1, r3
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <UART_SetConfig+0x2d4>)
 8003304:	fba3 2302 	umull	r2, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003310:	441c      	add	r4, r3
 8003312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800331c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	1891      	adds	r1, r2, r2
 800332a:	63b9      	str	r1, [r7, #56]	; 0x38
 800332c:	415b      	adcs	r3, r3
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003334:	4641      	mov	r1, r8
 8003336:	1851      	adds	r1, r2, r1
 8003338:	6339      	str	r1, [r7, #48]	; 0x30
 800333a:	4649      	mov	r1, r9
 800333c:	414b      	adcs	r3, r1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800334c:	4659      	mov	r1, fp
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	4651      	mov	r1, sl
 8003352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003356:	4651      	mov	r1, sl
 8003358:	00ca      	lsls	r2, r1, #3
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	4603      	mov	r3, r0
 8003360:	4642      	mov	r2, r8
 8003362:	189b      	adds	r3, r3, r2
 8003364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003368:	464b      	mov	r3, r9
 800336a:	460a      	mov	r2, r1
 800336c:	eb42 0303 	adc.w	r3, r2, r3
 8003370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003388:	460b      	mov	r3, r1
 800338a:	18db      	adds	r3, r3, r3
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	4613      	mov	r3, r2
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339e:	f7fc ff31 	bl	8000204 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <UART_SetConfig+0x2d4>)
 80033a8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2164      	movs	r1, #100	; 0x64
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <UART_SetConfig+0x2d4>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f003 0207 	and.w	r2, r3, #7
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4422      	add	r2, r4
 80033ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d0:	e105      	b.n	80035de <UART_SetConfig+0x4d6>
 80033d2:	bf00      	nop
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033f2:	4642      	mov	r2, r8
 80033f4:	464b      	mov	r3, r9
 80033f6:	1891      	adds	r1, r2, r2
 80033f8:	6239      	str	r1, [r7, #32]
 80033fa:	415b      	adcs	r3, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003402:	4641      	mov	r1, r8
 8003404:	1854      	adds	r4, r2, r1
 8003406:	4649      	mov	r1, r9
 8003408:	eb43 0501 	adc.w	r5, r3, r1
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003428:	464b      	mov	r3, r9
 800342a:	eb45 0303 	adc.w	r3, r5, r3
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344e:	4629      	mov	r1, r5
 8003450:	008b      	lsls	r3, r1, #2
 8003452:	4621      	mov	r1, r4
 8003454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003458:	4621      	mov	r1, r4
 800345a:	008a      	lsls	r2, r1, #2
 800345c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003460:	f7fc fed0 	bl	8000204 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4b60      	ldr	r3, [pc, #384]	; (80035ec <UART_SetConfig+0x4e4>)
 800346a:	fba3 2302 	umull	r2, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	011c      	lsls	r4, r3, #4
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800347c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	1891      	adds	r1, r2, r2
 800348a:	61b9      	str	r1, [r7, #24]
 800348c:	415b      	adcs	r3, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	4641      	mov	r1, r8
 8003496:	1851      	adds	r1, r2, r1
 8003498:	6139      	str	r1, [r7, #16]
 800349a:	4649      	mov	r1, r9
 800349c:	414b      	adcs	r3, r1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ac:	4659      	mov	r1, fp
 80034ae:	00cb      	lsls	r3, r1, #3
 80034b0:	4651      	mov	r1, sl
 80034b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b6:	4651      	mov	r1, sl
 80034b8:	00ca      	lsls	r2, r1, #3
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	4642      	mov	r2, r8
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c8:	464b      	mov	r3, r9
 80034ca:	460a      	mov	r2, r1
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80034de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034ec:	4649      	mov	r1, r9
 80034ee:	008b      	lsls	r3, r1, #2
 80034f0:	4641      	mov	r1, r8
 80034f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f6:	4641      	mov	r1, r8
 80034f8:	008a      	lsls	r2, r1, #2
 80034fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fe:	f7fc fe81 	bl	8000204 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <UART_SetConfig+0x4e4>)
 8003508:	fba3 1302 	umull	r1, r3, r3, r2
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	2164      	movs	r1, #100	; 0x64
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	3332      	adds	r3, #50	; 0x32
 800351a:	4a34      	ldr	r2, [pc, #208]	; (80035ec <UART_SetConfig+0x4e4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003526:	441c      	add	r4, r3
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	673b      	str	r3, [r7, #112]	; 0x70
 8003530:	677a      	str	r2, [r7, #116]	; 0x74
 8003532:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	1891      	adds	r1, r2, r2
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	415b      	adcs	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003546:	4641      	mov	r1, r8
 8003548:	1851      	adds	r1, r2, r1
 800354a:	6039      	str	r1, [r7, #0]
 800354c:	4649      	mov	r1, r9
 800354e:	414b      	adcs	r3, r1
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355e:	4659      	mov	r1, fp
 8003560:	00cb      	lsls	r3, r1, #3
 8003562:	4651      	mov	r1, sl
 8003564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003568:	4651      	mov	r1, sl
 800356a:	00ca      	lsls	r2, r1, #3
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	4603      	mov	r3, r0
 8003572:	4642      	mov	r2, r8
 8003574:	189b      	adds	r3, r3, r2
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
 8003578:	464b      	mov	r3, r9
 800357a:	460a      	mov	r2, r1
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	663b      	str	r3, [r7, #96]	; 0x60
 800358c:	667a      	str	r2, [r7, #100]	; 0x64
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800359a:	4649      	mov	r1, r9
 800359c:	008b      	lsls	r3, r1, #2
 800359e:	4641      	mov	r1, r8
 80035a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a4:	4641      	mov	r1, r8
 80035a6:	008a      	lsls	r2, r1, #2
 80035a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035ac:	f7fc fe2a 	bl	8000204 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <UART_SetConfig+0x4e4>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4422      	add	r2, r4
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	51eb851f 	.word	0x51eb851f

080035f0 <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8003604:	2300      	movs	r3, #0
 8003606:	73bb      	strb	r3, [r7, #14]
 8003608:	e00d      	b.n	8003626 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 800360a:	7bbb      	ldrb	r3, [r7, #14]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f810 	bl	800363c <calcCrc8>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	3301      	adds	r3, #1
 8003624:	73bb      	strb	r3, [r7, #14]
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	b29b      	uxth	r3, r3
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	429a      	cmp	r2, r3
 800362e:	d8ec      	bhi.n	800360a <genCrc+0x1a>
    }

  return crc;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	460a      	mov	r2, r1
 8003646:	71fb      	strb	r3, [r7, #7]
 8003648:	4613      	mov	r3, r2
 800364a:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8003650:	79fa      	ldrb	r2, [r7, #7]
 8003652:	79bb      	ldrb	r3, [r7, #6]
 8003654:	4053      	eors	r3, r2
 8003656:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	121b      	asrs	r3, r3, #8
 800365c:	b25a      	sxtb	r2, r3
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4905      	ldr	r1, [pc, #20]	; (8003678 <calcCrc8+0x3c>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	b25b      	sxtb	r3, r3
 8003666:	4053      	eors	r3, r2
 8003668:	b25b      	sxtb	r3, r3
 800366a:	b2db      	uxtb	r3, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	08003900 	.word	0x08003900

0800367c <dataPacketTxInit>:
 */

#include <dataPacketTx.h>

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
 8003688:	4613      	mov	r3, r2
 800368a:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	78ba      	ldrb	r2, [r7, #2]
 8003696:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_DATA_BYTES);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	2219      	movs	r2, #25
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f907 	bl	80038c0 <memset>
	dataPacketTx->crc8 = 0x00;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	775a      	strb	r2, [r3, #29]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_BYTES);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	331e      	adds	r3, #30
 80036bc:	221e      	movs	r2, #30
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f8fd 	bl	80038c0 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->dataPacketTxStatus = INVALID_DATA_PACKET;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	785a      	ldrb	r2, [r3, #1]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	77da      	strb	r2, [r3, #31]
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	789a      	ldrb	r2, [r3, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f883 2020 	strb.w	r2, [r3, #32]
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	78da      	ldrb	r2, [r3, #3]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	331e      	adds	r3, #30
 800370c:	1d18      	adds	r0, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	1d19      	adds	r1, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	78db      	ldrb	r3, [r3, #3]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 f8c4 	bl	80038a4 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	b29b      	uxth	r3, r3
 8003722:	3305      	adds	r3, #5
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 021e 	add.w	r2, r3, #30
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003734:	3b01      	subs	r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f7ff ff58 	bl	80035f0 <genCrc>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	775a      	strb	r2, [r3, #29]
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	78db      	ldrb	r3, [r3, #3]
 800374c:	3304      	adds	r3, #4
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	7f51      	ldrb	r1, [r2, #29]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	460a      	mov	r2, r1
 8003758:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacketTxStatus = VALID_DATA_PACKET;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 800376a:	b084      	sub	sp, #16
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	f107 0014 	add.w	r0, r7, #20
 8003778:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_DATA_PACKET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10a      	bne.n	800379c <dataPacketTxUartSend+0x32>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 011e 	add.w	r1, r3, #30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003790:	f107 0014 	add.w	r0, r7, #20
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	f7fe feff 	bl	800259a <HAL_UART_Transmit>
	}
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037a6:	b004      	add	sp, #16
 80037a8:	4770      	bx	lr

080037aa <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_DATA_PACKET;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_BYTES);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	331e      	adds	r3, #30
 80037be:	221e      	movs	r2, #30
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f87c 	bl	80038c0 <memset>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_DATA_PACKET;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_DATA_BYTES);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2219      	movs	r2, #25
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f869 	bl	80038c0 <memset>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_DATA_PACKET;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if ((command < 0x01) || (command > 0xFE))
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <dataPacketTxSetCommand+0x28>
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	2bff      	cmp	r3, #255	; 0xff
 8003814:	d003      	beq.n	800381e <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	709a      	strb	r2, [r3, #2]
 800381c:	e000      	b.n	8003820 <dataPacketTxSetCommand+0x2a>
		return;
 800381e:	bf00      	nop
}
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	4613      	mov	r3, r2
 8003836:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_DATA_PACKET;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3304      	adds	r3, #4
 8003844:	79fa      	ldrb	r2, [r7, #7]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f82b 	bl	80038a4 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	70da      	strb	r2, [r3, #3]
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f000 f82e 	bl	80038d0 <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08003a08 	.word	0x08003a08
 8003898:	08003a08 	.word	0x08003a08
 800389c:	08003a08 	.word	0x08003a08
 80038a0:	08003a0c 	.word	0x08003a0c

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ba:	4291      	cmp	r1, r2
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
